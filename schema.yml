openapi: 3.0.3
info:
  title: Safe Trade Marketplace API
  version: 1.0.0
  description: API for the Safe Trade Marketplace
paths:
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/auth/login/:
    post:
      operationId: v1_auth_login_create
      description: |-
        Handle POST request to obtain token pair.
        Sets token cookies and updates last login on success.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtain'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtain'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtain'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtain'
          description: ''
  /api/v1/auth/logout/:
    post:
      operationId: v1_auth_logout_create
      description: "\n    Logs out the user by clearing the access and refresh token\
        \ cookies.\n    "
      summary: User Logout
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Logout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Logout'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Successfully logged out
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Logout failed
          description: ''
  /api/v1/auth/o/{provider}/:
    get:
      operationId: v1_auth_o_retrieve
      description: |-
        Custom social provider view to handle authentication with social providers.
        Extends ProviderAuthView and adds cookie support for tokens.
      parameters:
      - in: path
        name: provider
        schema:
          type: string
          pattern: ^\S+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderAuth'
          description: ''
    post:
      operationId: v1_auth_o_create
      description: |-
        Handle POST request for social authentication.
        Sets token cookies if authentication is successful.
      parameters:
      - in: path
        name: provider
        schema:
          type: string
          pattern: ^\S+$
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderAuth'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProviderAuth'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProviderAuth'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderAuth'
          description: ''
  /api/v1/auth/refresh/:
    post:
      operationId: v1_auth_refresh_create
      description: "\n    Refreshes an expired access token using a valid refresh\
        \ token.\n    The refresh token is expected to be in an HTTP-only cookie (`refresh_token`).\n\
        \    A new access token is returned and also set as a cookie.\n    "
      summary: Refresh Access Token
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Token refreshed successfully
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: No refresh token found or token is blacklisted
          description: ''
        '429':
          content:
            application/json:
              schema:
                description: Too many refresh attempts
          description: ''
        '500':
          content:
            application/json:
              schema:
                description: Token refresh failed
          description: ''
  /api/v1/auth/users/:
    get:
      operationId: v1_auth_users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: v1_auth_users_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/v1/auth/users/{id}/:
    get:
      operationId: v1_auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: v1_auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/users/activation/:
    post:
      operationId: v1_auth_users_activation_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /api/v1/auth/users/me/:
    get:
      operationId: v1_auth_users_me_retrieve
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_auth_users_me_update
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_auth_users_me_partial_update
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: v1_auth_users_me_destroy
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/users/resend_activation/:
    post:
      operationId: v1_auth_users_resend_activation_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_email/:
    post:
      operationId: v1_auth_users_reset_email_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_email_confirm/:
    post:
      operationId: v1_auth_users_reset_email_confirm_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /api/v1/auth/users/reset_password/:
    post:
      operationId: v1_auth_users_reset_password_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_password_confirm/:
    post:
      operationId: v1_auth_users_reset_password_confirm_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRetype'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirmRetype'
          description: ''
  /api/v1/auth/users/set_email/:
    post:
      operationId: v1_auth_users_set_email_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /api/v1/auth/users/set_password/:
    post:
      operationId: v1_auth_users_set_password_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPasswordRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPasswordRetype'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPasswordRetype'
          description: ''
  /api/v1/auth/verify/:
    post:
      operationId: v1_auth_verify_create
      description: "\n    Verifies the validity of an access token.\n    The access\
        \ token is expected to be in an HTTP-only cookie (`access_token`).\n    "
      summary: Verify Access Token
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Token is valid
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Invalid or no token found
          description: ''
  /api/v1/brand-requests/:
    get:
      operationId: v1_brand_requests_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBrandRequestList'
          description: ''
    post:
      operationId: v1_brand_requests_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandRequest'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandRequest'
          description: ''
  /api/v1/brand-requests/{id}/:
    get:
      operationId: v1_brand_requests_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand request.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandRequest'
          description: ''
    put:
      operationId: v1_brand_requests_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand request.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandRequest'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandRequest'
          description: ''
    patch:
      operationId: v1_brand_requests_partial_update
      description: |-
        Brand Request ViewSet

        Endpoints:
        - GET /brand-requests/ - List requests (admin) or user's requests
        - POST /brand-requests/ - Submit new request
        - GET /brand-requests/{id}/ - Request detail
        - PATCH /brand-requests/{id}/process/ - Process request (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand request.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBrandRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBrandRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBrandRequest'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandRequest'
          description: ''
    delete:
      operationId: v1_brand_requests_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand request.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/brand-requests/{id}/process/:
    patch:
      operationId: v1_brand_requests_process_partial_update
      description: Process a brand request (approve/reject)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand request.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBrandRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBrandRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBrandRequest'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandRequest'
          description: ''
  /api/v1/brands/:
    get:
      operationId: v1_brands_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: query
        name: country
        schema:
          type: string
      - in: query
        name: featured
        schema:
          type: boolean
      - in: query
        name: founded_after
        schema:
          type: integer
      - in: query
        name: founded_before
        schema:
          type: integer
      - in: query
        name: min_products
        schema:
          type: integer
      - in: query
        name: min_rating
        schema:
          type: number
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: verified
        schema:
          type: boolean
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBrandListList'
          description: ''
    post:
      operationId: v1_brands_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCreate'
          description: ''
  /api/v1/brands/{brand_pk}/variants/:
    get:
      operationId: v1_brands_variants_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBrandVariantList'
          description: ''
    post:
      operationId: v1_brands_variants_create
      description: Standardized create method with proper error handling and response
        format.
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandVariant'
          description: ''
  /api/v1/brands/{brand_pk}/variants/{id}/:
    get:
      operationId: v1_brands_variants_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand variant.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandVariant'
          description: ''
    put:
      operationId: v1_brands_variants_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandVariant'
          description: ''
    patch:
      operationId: v1_brands_variants_partial_update
      description: Brand Variant management
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBrandVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBrandVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBrandVariant'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandVariant'
          description: ''
    delete:
      operationId: v1_brands_variants_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand variant.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/brands/{brand_pk}/variants/auto_generate/:
    post:
      operationId: v1_brands_variants_auto_generate_create
      description: Auto-generate variants for a brand
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandVariant'
          description: ''
  /api/v1/brands/{brand_pk}/variants/for_locale/:
    get:
      operationId: v1_brands_variants_for_locale_retrieve
      description: Get variant for specific locale
      parameters:
      - in: path
        name: brand_pk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandVariant'
          description: ''
  /api/v1/brands/{id}/:
    get:
      operationId: v1_brands_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
          description: ''
    put:
      operationId: v1_brands_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
          description: ''
    patch:
      operationId: v1_brands_partial_update
      description: |-
        Brand ViewSet with optimized queries and caching

        Endpoints:
        - GET /brands/ - List brands with filtering and search
        - GET /brands/{id}/ - Brand detail
        - POST /brands/ - Create brand (admin only)
        - PUT/PATCH /brands/{id}/ - Update brand (admin only)
        - DELETE /brands/{id}/ - Delete brand (admin only)
        - GET /brands/featured/ - Featured brands
        - GET /brands/search/ - Advanced search
        - GET /brands/{id}/analytics/ - Brand analytics (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBrandDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBrandDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBrandDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
          description: ''
    delete:
      operationId: v1_brands_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/brands/{id}/analytics/:
    get:
      operationId: v1_brands_analytics_retrieve
      description: Get brand analytics (admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
          description: ''
  /api/v1/brands/{id}/refresh_stats/:
    post:
      operationId: v1_brands_refresh_stats_create
      description: Manually refresh brand statistics
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
          description: ''
  /api/v1/brands/featured/:
    get:
      operationId: v1_brands_featured_retrieve
      description: Get featured brands
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDetail'
          description: ''
  /api/v1/brands/search/:
    get:
      operationId: v1_brands_search_retrieve
      description: Advanced brand search with multiple filters.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandList'
          description: ''
  /api/v1/categories/:
    get:
      operationId: v1_categories_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryListList'
          description: ''
    post:
      operationId: v1_categories_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryWrite'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryWrite'
          description: ''
  /api/v1/categories/{id}/:
    get:
      operationId: v1_categories_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetail'
          description: ''
    put:
      operationId: v1_categories_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryWrite'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryWrite'
          description: ''
    patch:
      operationId: v1_categories_partial_update
      description: |-
        API endpoint for managing product categories.
        Supports hierarchical category structures with parent-child relationships.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryWrite'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryWrite'
          description: ''
    delete:
      operationId: v1_categories_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/categories/{id}/breadcrumb/:
    get:
      operationId: v1_categories_breadcrumb_retrieve
      description: Get the breadcrumb path for a specific category.
      summary: Get Category Breadcrumb
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryBreadcrumbList'
          description: Breadcrumb path for the category
  /api/v1/categories/{id}/products/:
    get:
      operationId: v1_categories_products_retrieve
      description: Get the products belonging to a specific category.
      summary: Get Category Products
      parameters:
      - in: query
        name: brand
        schema:
          type: string
        description: Brand slug filter.
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      - in: query
        name: in_stock
        schema:
          type: boolean
        description: Only in-stock products.
      - in: query
        name: include_subcategories
        schema:
          type: boolean
        description: Include products from subcategories.
      - in: query
        name: price_max
        schema:
          type: number
          format: double
        description: Maximum price filter.
      - in: query
        name: price_min
        schema:
          type: number
          format: double
        description: Minimum price filter.
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryListList'
          description: List of products in the category
  /api/v1/categories/{id}/subcategories/:
    get:
      operationId: v1_categories_subcategories_retrieve
      description: Get the direct subcategories of a specific category.
      summary: Get Subcategories
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryListList'
          description: List of subcategories
  /api/v1/categories/popular/:
    get:
      operationId: v1_categories_popular_retrieve
      description: Get the most popular categories based on product count.
      summary: Get Popular Categories
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of categories to return.
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryListList'
          description: List of popular categories
  /api/v1/categories/tree/:
    get:
      operationId: v1_categories_tree_retrieve
      description: Get a hierarchical tree of all categories.
      summary: Get Category Tree
      parameters:
      - in: query
        name: depth
        schema:
          type: integer
        description: Maximum depth of the tree.
      - in: query
        name: include_inactive
        schema:
          type: boolean
        description: Include inactive categories.
      tags:
      - Categories
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryTreeList'
          description: List of categories in tree structure
  /api/v1/conditions/:
    get:
      operationId: v1_conditions_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductConditionListList'
          description: ''
    post:
      operationId: v1_conditions_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductConditionWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductConditionWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductConditionWrite'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionWrite'
          description: ''
  /api/v1/conditions/{id}/:
    get:
      operationId: v1_conditions_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Condition.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
    put:
      operationId: v1_conditions_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Condition.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductConditionWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductConditionWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductConditionWrite'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionWrite'
          description: ''
    patch:
      operationId: v1_conditions_partial_update
      description: Enhanced API endpoint for managing product conditions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Condition.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductConditionWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductConditionWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductConditionWrite'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionWrite'
          description: ''
    delete:
      operationId: v1_conditions_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Condition.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/conditions/{id}/analytics/:
    get:
      operationId: v1_conditions_analytics_retrieve
      description: Get detailed analytics for a condition.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Condition.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionAnalytics'
          description: ''
  /api/v1/conditions/{id}/products/:
    get:
      operationId: v1_conditions_products_retrieve
      description: Get products with this condition.
      parameters:
      - in: query
        name: brand
        schema:
          type: string
        description: Brand slug
      - in: query
        name: category
        schema:
          type: string
        description: Filter by category slug
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Condition.
        required: true
      - in: query
        name: in_stock
        schema:
          type: boolean
        description: Only in-stock products
      - in: query
        name: price_max
        schema:
          type: number
          format: double
        description: Maximum price
      - in: query
        name: price_min
        schema:
          type: number
          format: double
        description: Minimum price
      - in: query
        name: rating_min
        schema:
          type: number
          format: double
        description: Minimum rating
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/conditions/active/:
    get:
      operationId: v1_conditions_active_retrieve
      description: Get only active product conditions.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/conditions/bulk_order/:
    post:
      operationId: v1_conditions_bulk_order_create
      description: Bulk update display order for conditions.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConditionBulkOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConditionBulkOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConditionBulkOrder'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionBulkOrder'
          description: ''
  /api/v1/conditions/by_quality/:
    get:
      operationId: v1_conditions_by_quality_retrieve
      description: Get conditions by quality score range.
      parameters:
      - in: query
        name: max_score
        schema:
          type: integer
        description: Maximum quality score
      - in: query
        name: min_score
        schema:
          type: integer
        description: Minimum quality score
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/conditions/dropdown/:
    get:
      operationId: v1_conditions_dropdown_retrieve
      description: Get only active product conditions.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/conditions/popular/:
    get:
      operationId: v1_conditions_popular_retrieve
      description: Get most popular conditions.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/conditions/quality/{score}/:
    get:
      operationId: v1_conditions_quality_retrieve
      description: Get conditions by quality score range.
      parameters:
      - in: query
        name: max_score
        schema:
          type: integer
        description: Maximum quality score
      - in: query
        name: min_score
        schema:
          type: integer
        description: Minimum quality score
      - in: path
        name: score
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/conditions/suggest_price/:
    post:
      operationId: v1_conditions_suggest_price_create
      description: Suggest price based on condition and original price.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductConditionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductConditionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductConditionDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductConditionDetail'
          description: ''
  /api/v1/detail-templates/:
    get:
      operationId: v1_detail_templates_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductDetailTemplateSummaryList'
          description: ''
    post:
      operationId: v1_detail_templates_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplateCreate'
          description: ''
  /api/v1/detail-templates/{id}/:
    get:
      operationId: v1_detail_templates_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail template.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplate'
          description: ''
    put:
      operationId: v1_detail_templates_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail template.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateUpdate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplateUpdate'
          description: ''
    patch:
      operationId: v1_detail_templates_partial_update
      description: ViewSet for ProductDetail templates (admin-created)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail template.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductDetailTemplateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductDetailTemplateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductDetailTemplateUpdate'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplateUpdate'
          description: ''
    delete:
      operationId: v1_detail_templates_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail template.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/detail-templates/{id}/usage/:
    get:
      operationId: v1_detail_templates_usage_retrieve
      description: Get usage information for a template
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail template.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplate'
          description: ''
  /api/v1/detail-templates/bulk_create/:
    post:
      operationId: v1_detail_templates_bulk_create_create
      description: Bulk create templates
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateBulkCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateBulkCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetailTemplateBulkCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplateBulkCreate'
          description: ''
  /api/v1/detail-templates/for_category/:
    get:
      operationId: v1_detail_templates_for_category_retrieve
      description: Get templates available for a specific category
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailTemplate'
          description: ''
  /api/v1/disputes/:
    get:
      operationId: v1_disputes_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: query
        name: created_after
        schema:
          type: string
          format: date-time
      - in: query
        name: created_before
        schema:
          type: string
          format: date-time
      - in: query
        name: opened_by
        schema:
          type: number
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: reason
        schema:
          type: string
          enum:
          - damaged
          - not_as_described
          - not_received
          - other
          - wrong_item
        description: |-
          Why the dispute was raised

          * `not_as_described` - Item Not As Described
          * `not_received` - Item Not Received
          * `damaged` - Item Damaged
          * `wrong_item` - Wrong Item Received
          * `other` - Other
      - in: query
        name: status
        schema:
          type: string
          enum:
          - closed
          - in_review
          - opened
          - resolved_buyer
          - resolved_seller
        description: |-
          Current status of the dispute

          * `opened` - Opened
          * `in_review` - In Review
          * `resolved_buyer` - Resolved for Buyer
          * `resolved_seller` - Resolved for Seller
          * `closed` - Closed
      - in: query
        name: transaction
        schema:
          type: string
          format: uuid
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDisputeListList'
          description: ''
    post:
      operationId: v1_disputes_create
      description: Create a new dispute for a transaction.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DisputeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DisputeCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeCreate'
          description: ''
  /api/v1/disputes/{id}/:
    get:
      operationId: v1_disputes_retrieve
      description: |-
        Retrieve the details of a specific dispute.

        This method uses caching to improve performance for frequently accessed
        disputes.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Dispute.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeDetail'
          description: ''
    put:
      operationId: v1_disputes_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Dispute.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DisputeDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DisputeDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeDetail'
          description: ''
    patch:
      operationId: v1_disputes_partial_update
      description: |-
        A ViewSet for managing disputes over transactions.

        This ViewSet provides endpoints for creating, viewing, and resolving disputes.
        It ensures that only authorized users can perform these actions and applies
        rate limiting to prevent abuse.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Dispute.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDisputeDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDisputeDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDisputeDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeDetail'
          description: ''
    delete:
      operationId: v1_disputes_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Dispute.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/disputes/{id}/resolve/:
    post:
      operationId: v1_disputes_resolve_create
      description: Resolve a dispute. This action is restricted to staff users.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Dispute.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeResolution'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DisputeResolution'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DisputeResolution'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeResolution'
          description: ''
  /api/v1/disputes/my_disputes/:
    get:
      operationId: v1_disputes_my_disputes_retrieve
      description: Retrieve a list of disputes for the currently authenticated user.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeList'
          description: ''
  /api/v1/disputes/stats/:
    get:
      operationId: v1_disputes_stats_retrieve
      description: |-
        Retrieve statistics about disputes. This action is restricted to staff
        users.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeDetail'
          description: ''
  /api/v1/image-variants/:
    get:
      operationId: v1_image_variants_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageVariantList'
          description: ''
    post:
      operationId: v1_image_variants_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImageVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImageVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImageVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageVariant'
          description: ''
  /api/v1/image-variants/{id}/:
    get:
      operationId: v1_image_variants_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image variant.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageVariant'
          description: ''
    put:
      operationId: v1_image_variants_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImageVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImageVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImageVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageVariant'
          description: ''
    patch:
      operationId: v1_image_variants_partial_update
      description: |-
        Base ViewSet for patient-related models with standardized CRUD operations,
        plus configurable caching on `list` and `retrieve`.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductImageVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImageVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImageVariant'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageVariant'
          description: ''
    delete:
      operationId: v1_image_variants_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image variant.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/images/:
    get:
      operationId: v1_images_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
    post:
      operationId: v1_images_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/images/{id}/:
    get:
      operationId: v1_images_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    put:
      operationId: v1_images_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image.
        required: true
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    patch:
      operationId: v1_images_partial_update
      description: |-
        Base ViewSet for patient-related models with standardized CRUD operations,
        plus configurable caching on `list` and `retrieve`.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image.
        required: true
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    delete:
      operationId: v1_images_destroy
      description: Override destroy to handle file deletion
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product image.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/images/bulk_create/:
    post:
      operationId: v1_images_bulk_create_create
      description: Bulk create images (legacy endpoint for URL-based images)
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/images/bulk_upload/:
    post:
      operationId: v1_images_bulk_upload_create
      description: |-
        Base ViewSet for patient-related models with standardized CRUD operations,
        plus configurable caching on `list` and `retrieve`.
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/images/primary/:
    get:
      operationId: v1_images_primary_retrieve
      description: Get primary image for a product
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/images/upload_image/:
    post:
      operationId: v1_images_upload_image_create
      description: |-
        Base ViewSet for patient-related models with standardized CRUD operations,
        plus configurable caching on `list` and `retrieve`.
      tags:
      - v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/images/variants/:
    get:
      operationId: v1_images_variants_retrieve
      description: Get images grouped by variant
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/inventory/:
    get:
      operationId: v1_inventory_list
      description: ViewSet for inventory management operations
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInventoryTransactionList'
          description: ''
  /api/v1/inventory/{id}/:
    get:
      operationId: v1_inventory_retrieve
      description: ViewSet for inventory management operations
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this inventory transaction.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryTransaction'
          description: ''
  /api/v1/inventory/activate/:
    post:
      operationId: v1_inventory_activate_create
      description: Move inventory from total to available
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryTransaction'
          description: ''
  /api/v1/inventory/add/:
    post:
      operationId: v1_inventory_add_create
      description: Add inventory to total
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryTransaction'
          description: ''
  /api/v1/inventory/create-transaction/:
    post:
      operationId: v1_inventory_create_transaction_create
      description: |-
        Unified endpoint for creating escrow transactions.
        Handles both direct purchases and negotiation-based purchases.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InventoryTransaction'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryTransaction'
          description: ''
  /api/v1/inventory/history/{variant_id}/:
    get:
      operationId: v1_inventory_history_retrieve
      description: Get inventory transaction history for a product
      parameters:
      - in: path
        name: variant_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryTransaction'
          description: ''
  /api/v1/inventory/status/{variant_id}/:
    get:
      operationId: v1_inventory_status_retrieve
      description: Get current inventory status for a product
      parameters:
      - in: path
        name: variant_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryTransaction'
          description: ''
  /api/v1/negotiations/:
    get:
      operationId: v1_negotiations_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPriceNegotiationList'
          description: ''
    post:
      operationId: v1_negotiations_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/{id}/:
    get:
      operationId: v1_negotiations_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
    put:
      operationId: v1_negotiations_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
    patch:
      operationId: v1_negotiations_partial_update
      description: Enhanced negotiation viewset with caching and rate limiting
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
    delete:
      operationId: v1_negotiations_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/negotiations/{id}/buyer-respond/:
    post:
      operationId: v1_negotiations_buyer_respond_create
      description: Buyer-specific endpoint (delegates to unified method)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/{id}/respond/:
    post:
      operationId: v1_negotiations_respond_create
      description: |-
        Unified endpoint for both buyers and sellers to respond to negotiations.
        Handles accept, reject, and counter responses.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/{id}/seller-respond/:
    post:
      operationId: v1_negotiations_seller_respond_create
      description: Seller-specific endpoint (delegates to unified method)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this price negotiation.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/cancel/{negotiation_id}/:
    post:
      operationId: v1_negotiations_cancel_create
      description: Cancel an active negotiation.
      parameters:
      - in: path
        name: negotiation_id
        schema:
          type: string
          format: uuid
        description: UUID of the PriceNegotiation
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/initiate-negotiation/:
    post:
      operationId: v1_negotiations_initiate_negotiation_create
      description: |-
        Initiate a price negotiation for a product.
        Enhanced with caching, validation, and rate limiting.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceNegotiation'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/my_history/:
    get:
      operationId: v1_negotiations_my_history_retrieve
      description: Get user's negotiation history with caching.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/my_negotiations/:
    get:
      operationId: v1_negotiations_my_negotiations_retrieve
      description: Get current user's negotiations with caching and filtering options.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/negotiations/stats/{product_id}/:
    get:
      operationId: v1_negotiations_stats_retrieve
      description: Get negotiation statistics for a specific product.
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceNegotiation'
          description: ''
  /api/v1/product-details/{product_pk}/:
    get:
      operationId: v1_product_details_list
      description: List product details with optional filtering
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExtendedProductDetailList'
          description: ''
    post:
      operationId: v1_product_details_create
      description: Standardized create method with proper error handling and response
        format.
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
  /api/v1/product-details/{product_pk}/{id}/:
    get:
      operationId: v1_product_details_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail.
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
    put:
      operationId: v1_product_details_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail.
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
    patch:
      operationId: v1_product_details_partial_update
      description: ViewSet for ProductDetail with caching and rate limiting
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail.
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExtendedProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExtendedProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExtendedProductDetail'
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
    delete:
      operationId: v1_product_details_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product detail.
        required: true
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product-details/{product_pk}/available_templates/:
    get:
      operationId: v1_product_details_available_templates_retrieve
      description: Get available templates for this product's category
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
  /api/v1/product-details/{product_pk}/bulk_create/:
    post:
      operationId: v1_product_details_bulk_create_create
      description: Bulk create product details
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
  /api/v1/product-details/{product_pk}/create_from_template/:
    post:
      operationId: v1_product_details_create_from_template_create
      description: Create a product detail from a template
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExtendedProductDetail'
        required: true
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
  /api/v1/product-details/{product_pk}/grouped/:
    get:
      operationId: v1_product_details_grouped_retrieve
      description: Get details grouped by type
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
  /api/v1/product-details/{product_pk}/highlighted/:
    get:
      operationId: v1_product_details_highlighted_retrieve
      description: Get only highlighted details
      parameters:
      - in: path
        name: product_pk
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedProductDetail'
          description: ''
  /api/v1/product-metadata/:
    get:
      operationId: v1_product_metadata_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductMetaDetailList'
          description: ''
    post:
      operationId: v1_product_metadata_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaWrite'
          description: ''
  /api/v1/product-metadata/{id}/:
    get:
      operationId: v1_product_metadata_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Meta.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaDetail'
          description: ''
    put:
      operationId: v1_product_metadata_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Meta.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaWrite'
          description: ''
    patch:
      operationId: v1_product_metadata_partial_update
      description: |-
        API endpoint for managing and viewing product metadata.
        - Admin write operations for all metadata.
        - Read operations are public.
        - Owner operations for managing their own product metadata.
        - Specialized actions for retrieving popular/featured meta.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Meta.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductMetaWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductMetaWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductMetaWrite'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaWrite'
          description: ''
    delete:
      operationId: v1_product_metadata_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Product Meta.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/product-metadata/by-product/:
    get:
      operationId: v1_product_metadata_by_product_retrieve
      description: |-
        Retrieves product metadata for a given product ID or slug.
        This endpoint reliably creates the meta object if it doesn't exist.
      summary: Get Metadata by Product ID or Slug
      parameters:
      - in: query
        name: product_id
        schema:
          type: integer
        description: ID of the product.
      - in: query
        name: product_slug
        schema:
          type: string
        description: Slug of the product.
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaDetail'
          description: ''
  /api/v1/product-metadata/featured/:
    get:
      operationId: v1_product_metadata_featured_retrieve
      description: Returns a list of metadata for featured products.
      summary: Get Metadata for Featured Products
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Number of items to return.
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaDetail'
          description: ''
  /api/v1/product-metadata/my-products/:
    get:
      operationId: v1_product_metadata_my_products_retrieve
      description: Returns metadata for all products owned by the authenticated user.
      summary: Get Metadata for My Products
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of items to return.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaDetail'
          description: ''
  /api/v1/product-metadata/popular/:
    get:
      operationId: v1_product_metadata_popular_retrieve
      description: Returns a list of metadata for the most viewed products.
      summary: Get Metadata for Popular Products
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Number of items to return.
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaDetail'
          description: ''
  /api/v1/product-metadata/stats/:
    get:
      operationId: v1_product_metadata_stats_retrieve
      description: Returns paginated metadata for products, with optional filtering.
      summary: Get Statistics on Product Meta
      parameters:
      - in: query
        name: min_views
        schema:
          type: integer
        description: Filter by minimum view count.
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaDetail'
          description: ''
  /api/v1/product-metadata/update-my-product/:
    put:
      operationId: v1_product_metadata_update_my_product_update
      description: Update metadata for a product owned by the authenticated user.
      summary: Update Metadata for My Product
      parameters:
      - in: query
        name: product_id
        schema:
          type: integer
        description: ID of the product to update metadata for.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductMetaWrite'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaWrite'
          description: ''
    patch:
      operationId: v1_product_metadata_update_my_product_partial_update
      description: Update metadata for a product owned by the authenticated user.
      summary: Update Metadata for My Product
      parameters:
      - in: query
        name: product_id
        schema:
          type: integer
        description: ID of the product to update metadata for.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductMetaWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductMetaWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductMetaWrite'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMetaWrite'
          description: ''
  /api/v1/products/:
    get:
      operationId: v1_products_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: condition
        schema:
          type: string
          format: uuid
        description: Filter products by their condition ID
      - in: query
        name: created_after
        schema:
          type: string
          format: date-time
      - in: query
        name: created_before
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: has_discount
        schema:
          type: boolean
      - in: query
        name: has_specification
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: string
          format: uuid
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: max_price
        schema:
          type: number
      - in: query
        name: min_discount_percentage
        schema:
          type: number
      - in: query
        name: min_price
        schema:
          type: number
      - in: query
        name: min_views
        schema:
          type: number
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: original_price
        schema:
          type: number
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: price
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: seller
        schema:
          type: string
          format: uuid
      - in: query
        name: seller_email
        schema:
          type: string
      - in: query
        name: specification_value
        schema:
          type: string
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: updated_after
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_before
        schema:
          type: string
          format: date-time
      - in: query
        name: views_count
        schema:
          type: number
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductListList'
          description: ''
    post:
      operationId: v1_products_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreate'
          description: ''
  /api/v1/products-short-code/{short_code}/:
    get:
      operationId: v1_products_short_code_retrieve
      description: |-
        Retrieve a product by its short code.
        Used for both viewing and sharing via short URLs.
      parameters:
      - in: path
        name: short_code
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/{id}/:
    get:
      operationId: v1_products_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
    put:
      operationId: v1_products_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdate'
          description: ''
    patch:
      operationId: v1_products_partial_update
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductUpdate'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdate'
          description: ''
    delete:
      operationId: v1_products_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/products/{id}/manage_metadata/:
    get:
      operationId: v1_products_manage_metadata_retrieve
      description: |-
        Allow product owners to manage their product's metadata.
        GET: Retrieve current metadata (creates if doesn't exist)
        PATCH/PUT: Update metadata
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManageMetadata'
          description: ''
        '403':
          description: Not the owner of this product
        '404':
          description: Product not found
    put:
      operationId: v1_products_manage_metadata_update
      description: |-
        Allow product owners to manage their product's metadata.
        GET: Retrieve current metadata (creates if doesn't exist)
        PATCH/PUT: Update metadata
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManageMetadata'
          description: ''
        '403':
          description: Not the owner of this product
        '404':
          description: Product not found
    patch:
      operationId: v1_products_manage_metadata_partial_update
      description: |-
        Allow product owners to manage their product's metadata.
        GET: Retrieve current metadata (creates if doesn't exist)
        PATCH/PUT: Update metadata
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBaseProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBaseProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBaseProductDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManageMetadata'
          description: ''
        '403':
          description: Not the owner of this product
        '404':
          description: Product not found
  /api/v1/products/{id}/toggle-active/:
    post:
      operationId: v1_products_toggle_active_create
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/{id}/toggle-featured/:
    post:
      operationId: v1_products_toggle_featured_create
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/{id}/toggle-negotiation/:
    post:
      operationId: v1_products_toggle_negotiation_create
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BaseProductDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/{id}/watchers/:
    get:
      operationId: v1_products_watchers_retrieve
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/by-condition/{condition_id}/:
    get:
      operationId: v1_products_by_condition_retrieve
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: condition_id
        schema:
          type: string
          format: uuid
          description: Select the condition of this product
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/featured/:
    get:
      operationId: v1_products_featured_retrieve
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/my-products/:
    get:
      operationId: v1_products_my_products_retrieve
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/share-links/{short_code}/:
    get:
      operationId: v1_products_share_links_retrieve
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      parameters:
      - in: path
        name: short_code
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseProductDetail'
          description: ''
  /api/v1/products/stats/:
    get:
      operationId: v1_products_stats_retrieve
      description: |-
        ViewSet for managing products with different serializers for different operations.
        Supports CRUD operations, filtering, searching, and statistics.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStats'
          description: ''
  /api/v1/ratings/:
    get:
      operationId: v1_ratings_list
      description: Get paginated product ratings with filtering and sorting.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductRatingsList'
          description: ''
    post:
      operationId: v1_ratings_create
      description: Create a new rating (requires completed purchase and review text).
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateRating'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateRating'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRating'
          description: ''
  /api/v1/ratings/{id}/:
    get:
      operationId: v1_ratings_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
    put:
      operationId: v1_ratings_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRatings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRatings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRatings'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
    patch:
      operationId: v1_ratings_partial_update
      description: |-
        Base ViewSet for patient-related models with standardized CRUD operations,
        plus configurable caching on `list` and `retrieve`.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRatings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRatings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRatings'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
    delete:
      operationId: v1_ratings_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/ratings/{id}/update_rating/:
    put:
      operationId: v1_ratings_update_rating_update
      description: Update user's own rating.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRatings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRatings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRatings'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
    patch:
      operationId: v1_ratings_update_rating_partial_update
      description: Update user's own rating.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductRatings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductRatings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductRatings'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
  /api/v1/ratings/{id}/vote_helpful/:
    post:
      operationId: v1_ratings_vote_helpful_create
      description: Vote on rating helpfulness.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRatings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductRatings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductRatings'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
  /api/v1/ratings/aggregate/:
    get:
      operationId: v1_ratings_aggregate_retrieve
      description: Get rating aggregate for a product.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatingAggregate'
          description: ''
  /api/v1/ratings/can_rate/:
    get:
      operationId: v1_ratings_can_rate_retrieve
      description: Check if current user can rate a specific product.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
  /api/v1/ratings/my_ratings/:
    get:
      operationId: v1_ratings_my_ratings_retrieve
      description: Get current user's ratings with pagination.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRatings'
          description: ''
  /api/v1/ratings/ratings/:
    get:
      operationId: v1_ratings_ratings_list
      description: List ratings received by authenticated user
      summary: List ratings received by authenticated user
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRatingListList'
          description: List of ratings received
        '401':
          description: Authentication required
    post:
      operationId: v1_ratings_ratings_create
      description: Create a rating for a completed transaction.
      summary: Create a rating
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RatingCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RatingCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: Rating created successfully
        '400':
          description: Invalid input or transaction_id missing
        '401':
          description: Authentication required
  /api/v1/ratings/ratings/{id}/:
    get:
      operationId: v1_ratings_ratings_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User Rating.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: ''
    put:
      operationId: v1_ratings_ratings_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User Rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RatingDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RatingDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: ''
    patch:
      operationId: v1_ratings_ratings_partial_update
      description: |-
        ViewSet for managing ratings with all endpoints:
        - POST /ratings/ - Create rating (requires transaction_id in data/query)
        - GET /ratings/ - List all ratings for authenticated user (received)
        - GET /ratings/{id}/ - Get specific rating detail
        - GET /ratings/eligibility/ - Check rating eligibility (requires transaction_id)
        - GET /ratings/stats/ - Get user rating stats (requires user_id)
        - GET /ratings/pending/ - Get pending ratings for authenticated user
        - GET /ratings/given/ - Get ratings given by authenticated user
        - GET /ratings/received/ - Get ratings received by authenticated user
        - GET /ratings/user/{user_id}/ - Get ratings for specific user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User Rating.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRatingDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRatingDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRatingDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: ''
    delete:
      operationId: v1_ratings_ratings_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this User Rating.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/ratings/ratings/eligibility/:
    get:
      operationId: v1_ratings_ratings_eligibility_retrieve
      description: |-
        Check if user can rate a seller based on their transaction history
        Supports both approaches:
        1. New: ?seller_id=123 (robust profile-based approach)
        2. Legacy: ?transaction_id=123 (backward compatibility)
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEligibility'
          description: ''
  /api/v1/ratings/ratings/given/:
    get:
      operationId: v1_ratings_ratings_given_retrieve
      description: List ratings given by authenticated user
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: ''
  /api/v1/ratings/ratings/pending/:
    get:
      operationId: v1_ratings_ratings_pending_retrieve
      description: List transactions where authenticated user can still provide ratings
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingRating'
          description: ''
  /api/v1/ratings/ratings/received/:
    get:
      operationId: v1_ratings_ratings_received_retrieve
      description: List ratings received by authenticated user
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: ''
  /api/v1/ratings/ratings/stats/:
    get:
      operationId: v1_ratings_ratings_stats_retrieve
      description: Get aggregated rating statistics for a user
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingStats'
          description: ''
  /api/v1/transactions/:
    get:
      operationId: v1_transactions_list
      description: List transactions using service
      parameters:
      - in: query
        name: buyer
        schema:
          type: string
          format: uuid
      - in: query
        name: buyer_email
        schema:
          type: string
      - in: query
        name: created_after
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: created_before
        schema:
          type: string
          format: date-time
      - in: query
        name: currency
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: string
          format: uuid
      - in: query
        name: max_amount
        schema:
          type: number
      - in: query
        name: min_amount
        schema:
          type: number
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: price
        schema:
          type: number
      - in: query
        name: quantity
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: seller
        schema:
          type: string
          format: uuid
      - in: query
        name: seller_email
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      - in: query
        name: tracking_id
        schema:
          type: string
      - in: query
        name: updated_after
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_before
        schema:
          type: string
          format: date-time
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEscrowTransactionListList'
          description: ''
    post:
      operationId: v1_transactions_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/{id}/:
    get:
      operationId: v1_transactions_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
    put:
      operationId: v1_transactions_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
    patch:
      operationId: v1_transactions_partial_update
      description: |-
        ViewSet for managing escrow transactions.
        Buyers can view their purchases, sellers can view their sales.
        Tracking functionality is available to both parties involved in a transaction.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEscrowTransactionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEscrowTransactionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEscrowTransactionDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
    delete:
      operationId: v1_transactions_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/transactions/{id}/available-actions/:
    get:
      operationId: v1_transactions_available_actions_retrieve
      description: |-
        Get available actions for the current user on a specific transaction

        Returns:
            - available_actions: List of actions user can perform
            - user_role: User's role in this transaction (buyer/seller/staff)
            - current_status: Current transaction status
            - transaction_info: Basic transaction details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/{id}/update-status/:
    post:
      operationId: v1_transactions_update_status_create
      description: Enhanced status update endpoint with comprehensive validation
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/{id}/validate-action/:
    post:
      operationId: v1_transactions_validate_action_create
      description: |-
        Validate if a specific action can be performed without actually performing it
        Useful for frontend validation before showing confirmation dialogs
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Escrow Transaction.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EscrowTransactionDetail'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/my-purchases/:
    get:
      operationId: v1_transactions_my_purchases_retrieve
      description: Return only the current user's purchase transactions using service
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/my-transactions-actions/:
    get:
      operationId: v1_transactions_my_transactions_actions_retrieve
      description: |-
        Get available actions for all transactions where the user is a participant
        Useful for dashboard views showing actionable items
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/my_sales/:
    get:
      operationId: v1_transactions_my_sales_retrieve
      description: Return only the current user's sales transactions using service
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionDetail'
          description: ''
  /api/v1/transactions/track/{tracking_id}/:
    get:
      operationId: v1_transactions_track_retrieve
      description: |-
        Track an escrow transaction by its tracking ID.
        This endpoint is accessible to both buyers and sellers involved in the transaction.
      parameters:
      - in: path
        name: tracking_id
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscrowTransactionTracking'
          description: ''
  /api/v1/users/{user_id}/ratings/:
    get:
      operationId: list_user_ratings
      description: List all ratings for a specific user
      summary: List all ratings for a specific user
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: user_id
        schema:
          type: string
        description: UUID of the user whose ratings to fetch
        required: true
      tags:
      - User Ratings
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRatingListList'
          description: ''
        '400':
          description: Invalid user_id
        '404':
          description: User not found or no ratings
  /api/v1/users/{user_id}/ratings/{rating_id}/:
    get:
      operationId: retrieve_user_rating
      description: Retrieve a specific rating for a user
      summary: Retrieve a specific rating for a user
      parameters:
      - in: path
        name: rating_id
        schema:
          type: string
        description: UUID of the specific rating to fetch
        required: true
      - in: path
        name: user_id
        schema:
          type: string
        description: UUID of the user whose rating to fetch
        required: true
      tags:
      - User Ratings
      security:
      - cookie-jwt: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDetail'
          description: ''
        '400':
          description: Invalid user_id or rating_id
        '404':
          description: User or rating not found
  /api/v1/users/addresses/:
    get:
      operationId: v1_users_addresses_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
    post:
      operationId: v1_users_addresses_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
  /api/v1/users/addresses/{id}/:
    get:
      operationId: v1_users_addresses_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user address.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    put:
      operationId: v1_users_addresses_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user address.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    patch:
      operationId: v1_users_addresses_partial_update
      description: ViewSet for managing user addresses
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user address.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddress'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    delete:
      operationId: v1_users_addresses_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user address.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/users/profiles/:
    get:
      operationId: v1_users_profiles_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicUserList'
          description: ''
    post:
      operationId: v1_users_profiles_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicUser'
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
          description: ''
  /api/v1/users/profiles/{id}/:
    get:
      operationId: v1_users_profiles_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
          description: ''
    put:
      operationId: v1_users_profiles_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicUser'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
          description: ''
    patch:
      operationId: v1_users_profiles_partial_update
      description: ViewSet for user profiles with caching
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPublicUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPublicUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPublicUser'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
          description: ''
    delete:
      operationId: v1_users_profiles_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this custom user.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/users/stores/:
    get:
      operationId: v1_users_stores_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - User Store
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserStoreList'
          description: ''
    post:
      operationId: v1_users_stores_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - User Store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserStore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserStore'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStore'
          description: ''
  /api/v1/users/stores/{id}/:
    get:
      operationId: v1_users_stores_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user store.
        required: true
      tags:
      - User Store
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStore'
          description: ''
    put:
      operationId: v1_users_stores_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user store.
        required: true
      tags:
      - User Store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserStore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserStore'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStore'
          description: ''
    patch:
      operationId: v1_users_stores_partial_update
      description: ViewSet for managing user stores
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user store.
        required: true
      tags:
      - User Store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserStore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserStore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserStore'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStore'
          description: ''
    delete:
      operationId: v1_users_stores_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user store.
        required: true
      tags:
      - User Store
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/variant-options/:
    get:
      operationId: v1_variant_options_list
      description: The core `list` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductVariantOptionList'
          description: ''
    post:
      operationId: v1_variant_options_create
      description: Standardized create method with proper error handling and response
        format.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantOption'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantOption'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantOption'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantOption'
          description: ''
  /api/v1/variant-options/{id}/:
    get:
      operationId: v1_variant_options_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant option.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantOption'
          description: ''
    put:
      operationId: v1_variant_options_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant option.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantOption'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantOption'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantOption'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantOption'
          description: ''
    patch:
      operationId: v1_variant_options_partial_update
      description: ViewSet for managing variant options
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant option.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductVariantOption'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductVariantOption'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductVariantOption'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantOption'
          description: ''
    delete:
      operationId: v1_variant_options_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant option.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/variant-types/:
    get:
      operationId: v1_variant_types_list
      description: Get all variant types with options
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductVariantTypeList'
          description: ''
    post:
      operationId: v1_variant_types_create
      description: Create a new variant type
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantType'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantType'
          description: ''
  /api/v1/variant-types/{id}/:
    get:
      operationId: v1_variant_types_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant type.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantType'
          description: ''
    put:
      operationId: v1_variant_types_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant type.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantType'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantType'
          description: ''
    patch:
      operationId: v1_variant_types_partial_update
      description: ViewSet for managing product variant types
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant type.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductVariantType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductVariantType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductVariantType'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantType'
          description: ''
    delete:
      operationId: v1_variant_types_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant type.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/variants/:
    get:
      operationId: v1_variants_list
      description: List variants with enhanced filtering
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductVariantList'
          description: ''
    post:
      operationId: v1_variants_create
      description: Create a single variant
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantCreate'
          description: ''
  /api/v1/variants/{id}/:
    get:
      operationId: v1_variants_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    put:
      operationId: v1_variants_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    patch:
      operationId: v1_variants_partial_update
      description: Enhanced ViewSet for managing product variants
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductVariant'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
    delete:
      operationId: v1_variants_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/variants/{id}/release_stock/:
    post:
      operationId: v1_variants_release_stock_create
      description: Release reserved stock for a variant
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/variants/{id}/reserve_stock/:
    post:
      operationId: v1_variants_reserve_stock_create
      description: Reserve stock for a variant
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product variant.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/variants/bulk_create/:
    post:
      operationId: v1_variants_bulk_create_create
      description: Enhanced bulk create with better validation and async support
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantBulkCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantBulkCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantBulkCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantBulkCreate'
          description: ''
  /api/v1/variants/bulk_update_stock/:
    post:
      operationId: v1_variants_bulk_update_stock_create
      description: Bulk update stock quantities
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantStockUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantStockUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantStockUpdate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantStockUpdate'
          description: ''
  /api/v1/variants/generate_combinations/:
    post:
      operationId: v1_variants_generate_combinations_create
      description: Generate and create all possible variant combinations
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariantCombinationGenerator'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariantCombinationGenerator'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariantCombinationGenerator'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantCombinationGenerator'
          description: ''
  /api/v1/variants/matrix/:
    get:
      operationId: v1_variants_matrix_retrieve
      description: Get variant matrix for a product with enhanced data
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/variants/stats/:
    get:
      operationId: v1_variants_stats_retrieve
      description: Get variant statistics for a product
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/variants/validate_combination/:
    post:
      operationId: v1_variants_validate_combination_create
      description: Validate a variant combination
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductVariant'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductVariant'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/variants/variant_template/:
    get:
      operationId: v1_variants_variant_template_retrieve
      description: Get variant template for product creation forms
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
          description: ''
  /api/v1/watchlists/:
    get:
      operationId: v1_watchlists_list
      description: Get user's watchlist with enhanced filtering and caching.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductWatchlistItemListList'
          description: ''
    post:
      operationId: v1_watchlists_create
      description: Add a single product to watchlist with validation.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemCreate'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemCreate'
          description: ''
  /api/v1/watchlists/{id}/:
    get:
      operationId: v1_watchlists_retrieve
      description: The core `retrieve` logic—pulled out so we can wrap it in cache_page
        if needed.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product watchlist item.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemDetail'
          description: ''
    put:
      operationId: v1_watchlists_update
      description: Standardized update method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product watchlist item.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemDetail'
          description: ''
    patch:
      operationId: v1_watchlists_partial_update
      description: |-
        Enhanced API endpoint for managing product watchlist items.

        Provides full CRUD operations, bulk operations, statistics, and insights
        for user watchlists with proper error handling, caching, and validation.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product watchlist item.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductWatchlistItemDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductWatchlistItemDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductWatchlistItemDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemDetail'
          description: ''
    delete:
      operationId: v1_watchlists_destroy
      description: Standardized delete method with proper error handling and response
        format.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product watchlist item.
        required: true
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '204':
          description: No response body
  /api/v1/watchlists/bulk_operation/:
    post:
      operationId: v1_watchlists_bulk_operation_create
      description: Perform bulk operations (add/remove) on watchlist items.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWatchlistBulk'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWatchlistBulk'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWatchlistBulk'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistBulk'
          description: ''
  /api/v1/watchlists/by_product/:
    get:
      operationId: v1_watchlists_by_product_retrieve
      description: Get watchlist count for a specific product (Staff only) with caching.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemDetail'
          description: ''
  /api/v1/watchlists/check_product/:
    get:
      operationId: v1_watchlists_check_product_retrieve
      description: Check if a product is in the user's watchlist with caching.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemDetail'
          description: ''
  /api/v1/watchlists/insights/:
    get:
      operationId: v1_watchlists_insights_retrieve
      description: Get advanced insights about the user's watchlist.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistInsights'
          description: ''
  /api/v1/watchlists/remove_from_watchlist/:
    post:
      operationId: v1_watchlists_remove_from_watchlist_create
      description: Remove a watchlist item with proper validation.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWatchlistItemDetail'
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWatchlistItemDetail'
          description: ''
  /api/v1/watchlists/stats/:
    get:
      operationId: v1_watchlists_stats_retrieve
      description: Get statistics about the user's watchlist with caching.
      tags:
      - v1
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistStats'
          description: ''
  /api/v1/watchlists/toggle_product/:
    post:
      operationId: v1_watchlists_toggle_product_create
      description: Toggle a product in the user's watchlist.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatchlistOperationResult'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WatchlistOperationResult'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WatchlistOperationResult'
        required: true
      security:
      - cookie-jwt: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistOperationResult'
          description: ''
components:
  schemas:
    ActionEnum:
      enum:
      - price_offered
      - price_accepted
      - price_rejected
      - price_countered
      - price_updated
      type: string
      description: |-
        * `price_offered` - Price Offered
        * `price_accepted` - Price Accepted
        * `price_rejected` - Price Rejected
        * `price_countered` - Price Countered
        * `price_updated` - Price Updated
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    AddressTypeEnum:
      enum:
      - shipping
      - billing
      - both
      type: string
      description: |-
        * `shipping` - Shipping Address
        * `billing` - Billing Address
        * `both` - Shipping & Billing
    BaseProductDetail:
      type: object
      description: |-
        Detailed serializer for a single product.
        Includes all information including nested category and seller details.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        originalPrice:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        category:
          allOf:
          - $ref: '#/components/schemas/CategorySummary'
          readOnly: true
        condition:
          allOf:
          - $ref: '#/components/schemas/ProductConditionDetail'
          readOnly: true
        is_active:
          type: boolean
        requires_shipping:
          type: boolean
        escrow_hold_period:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Days to hold payment in escrow after delivery confirmation
        requires_inspection:
          type: boolean
        is_featured:
          type: boolean
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        brand:
          allOf:
          - $ref: '#/components/schemas/BrandList'
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        short_code:
          type: string
          nullable: true
          maxLength: 200
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          readOnly: true
        escrowFee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        location:
          type: string
          maxLength: 200
        variants:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        variant_combinations:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
          description: Specific variant combinations to create
        auto_generate_variants:
          type: object
          additionalProperties: {}
          writeOnly: true
          description: 'Auto-generate variants from option groups: {''color'': [1,2,3],
            ''size'': [4,5,6]}'
        base_variant_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          writeOnly: true
          description: Base price for auto-generated variants
        ratings:
          type: object
          additionalProperties: {}
          description: Get ratings from annotated fields
          readOnly: true
        details:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        breadcrumbs:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        discount_percent:
          type: number
          format: double
          readOnly: true
        watching_count:
          type: integer
          description: Get the number of users watching this product
          readOnly: true
        authenticity_guaranteed:
          type: boolean
        warranty_period:
          type: string
          description: Warranty period in months or years
          maxLength: 100
        is_negotiable:
          type: boolean
        negotiation_deadline:
          type: string
          format: date-time
          nullable: true
        max_negotiation_rounds:
          type: integer
          maximum: 2147483647
          minimum: 0
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        watchlist_items:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        total_views:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        user_has_purchased:
          type: boolean
          nullable: true
          description: Return purchase status for authenticated users
          readOnly: true
      required:
      - brand
      - breadcrumbs
      - category
      - condition
      - description
      - details
      - discount_percent
      - escrowFee
      - id
      - images
      - metadata
      - originalPrice
      - ratings
      - seller
      - slug
      - title
      - total_views
      - user_has_purchased
      - variants
      - watching_count
      - watchlist_items
    BrandCreate:
      type: object
      description: Serializer for creating brands (admin only)
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 120
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        logo:
          type: string
          format: uri
          nullable: true
        website:
          type: string
          format: uri
          maxLength: 200
        founded_year:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        country_of_origin:
          type: string
          maxLength: 100
        meta_description:
          type: string
          maxLength: 160
        is_verified:
          type: boolean
        is_featured:
          type: boolean
        contact_email:
          type: string
          format: email
          maxLength: 254
        contact_phone:
          type: string
          maxLength: 20
        social_media: {}
        is_active:
          type: boolean
      required:
      - created_at
      - id
      - name
      - updated_at
    BrandDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        stats:
          type: object
          additionalProperties: {}
          readOnly: true
        social_links:
          type: array
          items: {}
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 120
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        logo:
          type: string
          format: uri
          nullable: true
        website:
          type: string
          format: uri
          maxLength: 200
        founded_year:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        country_of_origin:
          type: string
          maxLength: 100
        meta_description:
          type: string
          maxLength: 160
        is_verified:
          type: boolean
        is_featured:
          type: boolean
        contact_email:
          type: string
          format: email
          maxLength: 254
        contact_phone:
          type: string
          maxLength: 20
        social_media: {}
        is_active:
          type: boolean
      required:
      - created_at
      - id
      - name
      - social_links
      - stats
      - updated_at
    BrandList:
      type: object
      description: Lightweight serializer for brand lists
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 120
          pattern: ^[-a-zA-Z0-9_]+$
        logo:
          type: string
          format: uri
          nullable: true
        country_of_origin:
          type: string
          maxLength: 100
        is_verified:
          type: boolean
        is_featured:
          type: boolean
        product_count:
          type: integer
          maximum: 100
          minimum: 1
          readOnly: true
        average_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        social_media_data:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - average_rating
      - id
      - name
      - product_count
      - social_media_data
    BrandRequest:
      type: object
      description: Serializer for brand requests
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        requested_by_username:
          type: string
          readOnly: true
        brand_name:
          type: string
          maxLength: 100
        reason:
          type: string
          description: Why should this brand be added?
        website:
          type: string
          format: uri
          maxLength: 200
        status:
          allOf:
          - $ref: '#/components/schemas/BrandRequestStatusEnum'
          readOnly: true
        admin_notes:
          type: string
        requested_by:
          type: string
          format: uuid
          readOnly: true
        processed_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        created_brand:
          type: string
          format: uuid
          readOnly: true
          nullable: true
      required:
      - brand_name
      - created_at
      - created_brand
      - id
      - processed_by
      - reason
      - requested_by
      - requested_by_username
      - status
      - updated_at
    BrandRequestStatusEnum:
      enum:
      - pending
      - approved
      - rejected
      type: string
      description: |-
        * `pending` - Pending
        * `approved` - Approved
        * `rejected` - Rejected
    BrandVariant:
      type: object
      description: Serializer for brand variants
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
        language_code:
          type: string
          maxLength: 10
        region_code:
          type: string
          maxLength: 10
        description:
          type: string
        logo:
          type: string
          format: uri
          nullable: true
        local_website:
          type: string
          format: uri
          maxLength: 200
        local_contact_email:
          type: string
          format: email
          maxLength: 254
        local_social_media: {}
        is_auto_generated:
          type: boolean
          readOnly: true
        is_active:
          type: boolean
        brand:
          type: string
          format: uuid
          readOnly: true
        created_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
      required:
      - brand
      - created_at
      - created_by
      - id
      - is_auto_generated
      - language_code
      - name
      - region_code
      - updated_at
    CategoryBreadcrumb:
      type: object
      description: Serializer for category breadcrumb navigation.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        path:
          type: array
          items: {}
          description: Build breadcrumb path from root to current category.
          readOnly: true
      required:
      - id
      - name
      - path
    CategoryDetail:
      type: object
      description: Detailed category serializer with parent info and recursive subcategories.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        parent:
          type: string
          format: uuid
          nullable: true
        parent_name:
          type: string
          readOnly: true
          nullable: true
        breadcrumbs:
          type: array
          items: {}
          readOnly: true
        products_count:
          type: integer
          description: Get count of products in this category.
          readOnly: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - breadcrumbs
      - created_at
      - id
      - name
      - parent_name
      - products_count
      - updated_at
    CategoryList:
      type: object
      description: Simple serializer for listing categories.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        parent:
          type: string
          format: uuid
          nullable: true
        subcategories_count:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - subcategories_count
    CategorySummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parent_name:
          type: string
          readOnly: true
          nullable: true
      required:
      - description
      - id
      - name
      - parent_name
    CategoryTree:
      type: object
      description: Optimized serializer for category tree representation.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        is_active:
          type: boolean
        subcategories:
          type: array
          items: {}
          readOnly: true
      required:
      - id
      - name
      - slug
      - subcategories
    CategoryWrite:
      type: object
      description: Serializer for creating/updating categories.
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
        parent:
          type: string
          format: uuid
          nullable: true
        is_active:
          type: boolean
      required:
      - name
    ConditionBulkOrder:
      type: object
      description: Serializer for bulk updating display order.
      properties:
        conditions:
          type: array
          items:
            type: object
            additionalProperties:
              type: integer
              maximum: 1000
              minimum: 1
      required:
      - conditions
    CreateRating:
      type: object
      properties:
        rating:
          type: integer
          maximum: 5
          minimum: 1
        review:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          maxLength: 200
      required:
      - rating
    CustomTokenObtain:
      type: object
      description: Custom serializer for JWT token generation.
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    DetailTypeEnum:
      enum:
      - specification
      - feature
      - description
      - warning
      - care_instruction
      - dimension
      - material
      - compatibility
      - other
      type: string
      description: |-
        * `specification` - Specification
        * `feature` - Feature
        * `description` - Description
        * `warning` - Warning
        * `care_instruction` - Care Instruction
        * `dimension` - Dimension
        * `material` - Material
        * `compatibility` - Compatibility
        * `other` - Other
    DisplayTypeEnum:
      enum:
      - dropdown
      - radio
      - color_swatch
      - image_swatch
      - text
      type: string
      description: |-
        * `dropdown` - Dropdown
        * `radio` - Radio Buttons
        * `color_swatch` - Color Swatch
        * `image_swatch` - Image Swatch
        * `text` - Text Input
    DisputeCreate:
      type: object
      description: |-
        Serializer for creating a new dispute.

        This serializer validates the input data for creating a dispute, ensuring
        that the transaction exists and that the user is authorized to open a
        dispute for it.
      properties:
        transaction_id:
          type: string
          format: uuid
        reason:
          $ref: '#/components/schemas/DisputeReasonEnum'
        description:
          type: string
          maxLength: 5000
      required:
      - description
      - reason
      - transaction_id
    DisputeDetail:
      type: object
      description: |-
        Detailed serializer for the Dispute model.

        This serializer provides a comprehensive view of a dispute, including
        details about the users involved, the reason and status of the dispute,
        and information about the associated transaction.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        transaction:
          type: string
          format: uuid
          description: The transaction under dispute
        opened_by:
          type: string
          format: uuid
          readOnly: true
          description: User who opened this dispute
        opened_by_name:
          type: string
          readOnly: true
        reason:
          allOf:
          - $ref: '#/components/schemas/DisputeReasonEnum'
          description: |-
            Why the dispute was raised

            * `not_as_described` - Item Not As Described
            * `not_received` - Item Not Received
            * `damaged` - Item Damaged
            * `wrong_item` - Wrong Item Received
            * `other` - Other
        reason_display:
          type: string
          readOnly: true
        description:
          type: string
          description: Details provided by the user opening the dispute
        status:
          allOf:
          - $ref: '#/components/schemas/DisputeStatusEnum'
          description: |-
            Current status of the dispute

            * `opened` - Opened
            * `in_review` - In Review
            * `resolved_buyer` - Resolved for Buyer
            * `resolved_seller` - Resolved for Seller
            * `closed` - Closed
        status_display:
          type: string
          readOnly: true
        resolved_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
          description: Staff or moderator who resolved this dispute
        resolved_by_name:
          type: string
          readOnly: true
        resolution_note:
          type: string
          description: Notes on how dispute was resolved
        transaction_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - description
      - id
      - opened_by
      - opened_by_name
      - reason
      - reason_display
      - resolved_by
      - resolved_by_name
      - status_display
      - transaction
      - transaction_amount
      - updated_at
    DisputeList:
      type: object
      description: |-
        Lightweight serializer for listing disputes.

        This serializer provides a concise summary of a dispute, suitable for use
        in lists where a full representation is not required.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        transaction:
          type: string
          format: uuid
          description: The transaction under dispute
        opened_by_name:
          type: string
          readOnly: true
        reason_display:
          type: string
          readOnly: true
        status_display:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - opened_by_name
      - reason_display
      - status_display
      - transaction
    DisputeReasonEnum:
      enum:
      - not_as_described
      - not_received
      - damaged
      - wrong_item
      - other
      type: string
      description: |-
        * `not_as_described` - Item Not As Described
        * `not_received` - Item Not Received
        * `damaged` - Item Damaged
        * `wrong_item` - Wrong Item Received
        * `other` - Other
    DisputeResolution:
      type: object
      description: |-
        Serializer for resolving a dispute.

        This serializer is used by staff members to update the status of a dispute
        and provide a resolution note.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/DisputeStatusEnum'
          description: |-
            Current status of the dispute

            * `opened` - Opened
            * `in_review` - In Review
            * `resolved_buyer` - Resolved for Buyer
            * `resolved_seller` - Resolved for Seller
            * `closed` - Closed
        resolution_note:
          type: string
          description: Notes on how dispute was resolved
    DisputeStatusEnum:
      enum:
      - opened
      - in_review
      - resolved_buyer
      - resolved_seller
      - closed
      type: string
      description: |-
        * `opened` - Opened
        * `in_review` - In Review
        * `resolved_buyer` - Resolved for Buyer
        * `resolved_seller` - Resolved for Seller
        * `closed` - Closed
    EscrowTransactionDetail:
      type: object
      description: Detailed serializer for escrow transactions
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tracking_id:
          type: string
          maxLength: 50
        image:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        product_details:
          type: object
          additionalProperties: {}
          readOnly: true
        variant_details:
          type: object
          additionalProperties: {}
          readOnly: true
        buyer_details:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        seller_details:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/EscrowTransactionStatusEnum'
        inspection_period_days:
          type: integer
          maximum: 32767
          minimum: 0
        inspection_end_date:
          type: string
          format: date-time
          nullable: true
        tracking_number:
          type: string
          nullable: true
          maxLength: 100
        shipping_carrier:
          type: string
          nullable: true
          maxLength: 100
        shipping_address:
          type: string
          nullable: true
        notes:
          type: string
        status_changed_at:
          type: string
          format: date-time
        is_auto_transition_scheduled:
          type: boolean
        auto_transition_type:
          type: string
          nullable: true
          maxLength: 30
        next_auto_transition_at:
          type: string
          format: date-time
          nullable: true
        history:
          type: array
          items: {}
          readOnly: true
        breadcrumbs:
          type: array
          items: {}
          readOnly: true
      required:
      - breadcrumbs
      - buyer_details
      - history
      - id
      - image
      - product_details
      - seller_details
      - tracking_id
      - variant_details
    EscrowTransactionList:
      type: object
      description: Serializer for listing escrow transactions
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tracking_id:
          type: string
          maxLength: 50
        product_title:
          type: string
          readOnly: true
        buyer_name:
          type: string
          nullable: true
          readOnly: true
        seller_name:
          type: string
          nullable: true
          readOnly: true
        status:
          $ref: '#/components/schemas/EscrowTransactionStatusEnum'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        created_at:
          type: string
          format: date-time
          readOnly: true
        days_since_created:
          type: integer
          readOnly: true
        history:
          type: array
          items: {}
          readOnly: true
      required:
      - buyer_name
      - created_at
      - days_since_created
      - history
      - id
      - product_title
      - seller_name
      - tracking_id
    EscrowTransactionStatusEnum:
      enum:
      - initiated
      - payment_received
      - shipped
      - delivered
      - inspection
      - disputed
      - completed
      - refunded
      - cancelled
      - funds_released
      type: string
      description: |-
        * `initiated` - Initiated
        * `payment_received` - Payment Received
        * `shipped` - Shipped
        * `delivered` - Delivered
        * `inspection` - In Inspection
        * `disputed` - Disputed
        * `completed` - Completed
        * `refunded` - Refunded
        * `cancelled` - Cancelled
        * `funds_released` - Funds Released
    EscrowTransactionTracking:
      type: object
      description: Serializer specifically for tracking an escrow transaction
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tracking_id:
          type: string
          maxLength: 50
        product_title:
          type: string
          readOnly: true
        image_url:
          type: string
          nullable: true
          readOnly: true
        status:
          $ref: '#/components/schemas/EscrowTransactionStatusEnum'
        status_display:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        estimated_completion:
          type: string
          nullable: true
          description: Estimate when the transaction will be completed
          readOnly: true
        tracking_info:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get shipping tracking information if available
          readOnly: true
        inspection_end_date:
          type: string
          format: date-time
          nullable: true
      required:
      - created_at
      - estimated_completion
      - id
      - image_url
      - product_title
      - status_display
      - tracking_id
      - tracking_info
      - updated_at
    ExtendedProductDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        detail_type_display:
          type: string
          readOnly: true
        label:
          type: string
          maxLength: 100
        value:
          type: string
        unit:
          type: string
          maxLength: 20
        formatted_value:
          type: string
          description: Returns formatted value with unit if available
          readOnly: true
        is_highlighted:
          type: boolean
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
      required:
      - detail_type_display
      - formatted_value
      - id
      - label
      - value
    InventoryTransaction:
      type: object
      description: Serializer for inventory transaction details
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        transaction_type:
          allOf:
          - $ref: '#/components/schemas/TransactionTypeEnum'
          readOnly: true
        transaction_type_display:
          type: string
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        previous_total:
          type: integer
          readOnly: true
        previous_available:
          type: integer
          readOnly: true
        previous_in_escrow:
          type: integer
          readOnly: true
        new_total:
          type: integer
          readOnly: true
        new_available:
          type: integer
          readOnly: true
        new_in_escrow:
          type: integer
          readOnly: true
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by_username:
          type: string
          readOnly: true
        product_title:
          type: string
          readOnly: true
      required:
      - created_at
      - created_by_username
      - id
      - new_available
      - new_in_escrow
      - new_total
      - previous_available
      - previous_in_escrow
      - previous_total
      - product_title
      - quantity
      - transaction_type
      - transaction_type_display
      - updated_at
    Logout:
      type: object
      description: Serializer for logging out users by clearing authentication cookies.
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    ManageMetadata:
      type: object
      description: |-
        Serializer for managing product metadata.
        Used in the product management interface.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        original_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          maxLength: 3
        category:
          type: string
          format: uuid
          nullable: true
        condition:
          type: string
          format: uuid
          nullable: true
          description: Select the condition of this product
        is_active:
          type: boolean
        is_featured:
          type: boolean
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        brand:
          type: string
          format: uuid
          nullable: true
        escrow_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        requires_inspection:
          type: boolean
        authenticity_guaranteed:
          type: boolean
        warranty_period:
          type: string
          description: Warranty period in months or years
          maxLength: 100
      required:
      - description
      - id
      - title
    NegotiationHistory:
      type: object
      description: Serializer for negotiation history
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        action:
          $ref: '#/components/schemas/ActionEnum'
        user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        formatted_price:
          type: string
          nullable: true
          readOnly: true
        timestamp:
          type: string
          format: date-time
        time_ago:
          type: string
          nullable: true
          description: Human readable time difference
          readOnly: true
        notes:
          type: string
          nullable: true
      required:
      - action
      - formatted_price
      - id
      - time_ago
      - user
    NullEnum:
      enum:
      - null
    OperationEnum:
      enum:
      - add
      - remove
      type: string
      description: |-
        * `add` - Add products to watchlist
        * `remove` - Remove products from watchlist
    PaginatedBrandListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BrandList'
    PaginatedBrandRequestList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BrandRequest'
    PaginatedBrandVariantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BrandVariant'
    PaginatedCategoryBreadcrumbList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategoryBreadcrumb'
    PaginatedCategoryListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategoryList'
    PaginatedCategoryTreeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategoryTree'
    PaginatedDisputeListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/DisputeList'
    PaginatedEscrowTransactionListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EscrowTransactionList'
    PaginatedExtendedProductDetailList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedProductDetail'
    PaginatedInventoryTransactionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/InventoryTransaction'
    PaginatedPriceNegotiationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PriceNegotiation'
    PaginatedProductConditionListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductConditionList'
    PaginatedProductDetailTemplateSummaryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductDetailTemplateSummary'
    PaginatedProductImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
    PaginatedProductImageVariantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageVariant'
    PaginatedProductListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductList'
    PaginatedProductMetaDetailList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductMetaDetail'
    PaginatedProductRatingsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductRatings'
    PaginatedProductVariantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
    PaginatedProductVariantOptionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantOption'
    PaginatedProductVariantTypeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantType'
    PaginatedProductWatchlistItemListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductWatchlistItemList'
    PaginatedPublicUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PublicUser'
    PaginatedRatingListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RatingList'
    PaginatedUserAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedUserStoreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserStore'
    PasswordResetConfirmRetype:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
        re_new_password:
          type: string
      required:
      - new_password
      - re_new_password
      - token
      - uid
    PatchedBaseProductDetail:
      type: object
      description: |-
        Detailed serializer for a single product.
        Includes all information including nested category and seller details.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        originalPrice:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        category:
          allOf:
          - $ref: '#/components/schemas/CategorySummary'
          readOnly: true
        condition:
          allOf:
          - $ref: '#/components/schemas/ProductConditionDetail'
          readOnly: true
        is_active:
          type: boolean
        requires_shipping:
          type: boolean
        escrow_hold_period:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Days to hold payment in escrow after delivery confirmation
        requires_inspection:
          type: boolean
        is_featured:
          type: boolean
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        brand:
          allOf:
          - $ref: '#/components/schemas/BrandList'
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        short_code:
          type: string
          nullable: true
          maxLength: 200
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          readOnly: true
        escrowFee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        location:
          type: string
          maxLength: 200
        variants:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        variant_combinations:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
          description: Specific variant combinations to create
        auto_generate_variants:
          type: object
          additionalProperties: {}
          writeOnly: true
          description: 'Auto-generate variants from option groups: {''color'': [1,2,3],
            ''size'': [4,5,6]}'
        base_variant_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          writeOnly: true
          description: Base price for auto-generated variants
        ratings:
          type: object
          additionalProperties: {}
          description: Get ratings from annotated fields
          readOnly: true
        details:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        breadcrumbs:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        discount_percent:
          type: number
          format: double
          readOnly: true
        watching_count:
          type: integer
          description: Get the number of users watching this product
          readOnly: true
        authenticity_guaranteed:
          type: boolean
        warranty_period:
          type: string
          description: Warranty period in months or years
          maxLength: 100
        is_negotiable:
          type: boolean
        negotiation_deadline:
          type: string
          format: date-time
          nullable: true
        max_negotiation_rounds:
          type: integer
          maximum: 2147483647
          minimum: 0
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        watchlist_items:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        total_views:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        user_has_purchased:
          type: boolean
          nullable: true
          description: Return purchase status for authenticated users
          readOnly: true
    PatchedBrandDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        stats:
          type: object
          additionalProperties: {}
          readOnly: true
        social_links:
          type: array
          items: {}
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 120
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        logo:
          type: string
          format: uri
          nullable: true
        website:
          type: string
          format: uri
          maxLength: 200
        founded_year:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        country_of_origin:
          type: string
          maxLength: 100
        meta_description:
          type: string
          maxLength: 160
        is_verified:
          type: boolean
        is_featured:
          type: boolean
        contact_email:
          type: string
          format: email
          maxLength: 254
        contact_phone:
          type: string
          maxLength: 20
        social_media: {}
        is_active:
          type: boolean
    PatchedBrandRequest:
      type: object
      description: Serializer for brand requests
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        requested_by_username:
          type: string
          readOnly: true
        brand_name:
          type: string
          maxLength: 100
        reason:
          type: string
          description: Why should this brand be added?
        website:
          type: string
          format: uri
          maxLength: 200
        status:
          allOf:
          - $ref: '#/components/schemas/BrandRequestStatusEnum'
          readOnly: true
        admin_notes:
          type: string
        requested_by:
          type: string
          format: uuid
          readOnly: true
        processed_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        created_brand:
          type: string
          format: uuid
          readOnly: true
          nullable: true
    PatchedBrandVariant:
      type: object
      description: Serializer for brand variants
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
        language_code:
          type: string
          maxLength: 10
        region_code:
          type: string
          maxLength: 10
        description:
          type: string
        logo:
          type: string
          format: uri
          nullable: true
        local_website:
          type: string
          format: uri
          maxLength: 200
        local_contact_email:
          type: string
          format: email
          maxLength: 254
        local_social_media: {}
        is_auto_generated:
          type: boolean
          readOnly: true
        is_active:
          type: boolean
        brand:
          type: string
          format: uuid
          readOnly: true
        created_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
    PatchedCategoryWrite:
      type: object
      description: Serializer for creating/updating categories.
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
        parent:
          type: string
          format: uuid
          nullable: true
        is_active:
          type: boolean
    PatchedDisputeDetail:
      type: object
      description: |-
        Detailed serializer for the Dispute model.

        This serializer provides a comprehensive view of a dispute, including
        details about the users involved, the reason and status of the dispute,
        and information about the associated transaction.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        transaction:
          type: string
          format: uuid
          description: The transaction under dispute
        opened_by:
          type: string
          format: uuid
          readOnly: true
          description: User who opened this dispute
        opened_by_name:
          type: string
          readOnly: true
        reason:
          allOf:
          - $ref: '#/components/schemas/DisputeReasonEnum'
          description: |-
            Why the dispute was raised

            * `not_as_described` - Item Not As Described
            * `not_received` - Item Not Received
            * `damaged` - Item Damaged
            * `wrong_item` - Wrong Item Received
            * `other` - Other
        reason_display:
          type: string
          readOnly: true
        description:
          type: string
          description: Details provided by the user opening the dispute
        status:
          allOf:
          - $ref: '#/components/schemas/DisputeStatusEnum'
          description: |-
            Current status of the dispute

            * `opened` - Opened
            * `in_review` - In Review
            * `resolved_buyer` - Resolved for Buyer
            * `resolved_seller` - Resolved for Seller
            * `closed` - Closed
        status_display:
          type: string
          readOnly: true
        resolved_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
          description: Staff or moderator who resolved this dispute
        resolved_by_name:
          type: string
          readOnly: true
        resolution_note:
          type: string
          description: Notes on how dispute was resolved
        transaction_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedEscrowTransactionDetail:
      type: object
      description: Detailed serializer for escrow transactions
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        tracking_id:
          type: string
          maxLength: 50
        image:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        product_details:
          type: object
          additionalProperties: {}
          readOnly: true
        variant_details:
          type: object
          additionalProperties: {}
          readOnly: true
        buyer_details:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        seller_details:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/EscrowTransactionStatusEnum'
        inspection_period_days:
          type: integer
          maximum: 32767
          minimum: 0
        inspection_end_date:
          type: string
          format: date-time
          nullable: true
        tracking_number:
          type: string
          nullable: true
          maxLength: 100
        shipping_carrier:
          type: string
          nullable: true
          maxLength: 100
        shipping_address:
          type: string
          nullable: true
        notes:
          type: string
        status_changed_at:
          type: string
          format: date-time
        is_auto_transition_scheduled:
          type: boolean
        auto_transition_type:
          type: string
          nullable: true
          maxLength: 30
        next_auto_transition_at:
          type: string
          format: date-time
          nullable: true
        history:
          type: array
          items: {}
          readOnly: true
        breadcrumbs:
          type: array
          items: {}
          readOnly: true
    PatchedExtendedProductDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        detail_type_display:
          type: string
          readOnly: true
        label:
          type: string
          maxLength: 100
        value:
          type: string
        unit:
          type: string
          maxLength: 20
        formatted_value:
          type: string
          description: Returns formatted value with unit if available
          readOnly: true
        is_highlighted:
          type: boolean
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
    PatchedPriceNegotiation:
      type: object
      description: Main serializer for price negotiations
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductSummary'
          readOnly: true
        buyer:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        variant:
          allOf:
          - $ref: '#/components/schemas/VariantShort'
          readOnly: true
        formatted_original_price:
          type: string
          readOnly: true
        formatted_offered_price:
          type: string
          readOnly: true
        formatted_final_price:
          type: string
          nullable: true
          readOnly: true
        status_display:
          type: string
          readOnly: true
        discount_amount:
          type: number
          format: double
          description: Calculate discount amount from original price
          readOnly: true
        discount_percentage:
          type: number
          format: double
          description: Calculate discount percentage
          readOnly: true
        offered_at:
          type: string
          format: date-time
        time_remaining:
          type: string
          nullable: true
          description: Calculate time remaining for negotiation response
          readOnly: true
        can_respond:
          type: boolean
          description: Check if current user can respond to this negotiation
          readOnly: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/NegotiationHistory'
          readOnly: true
    PatchedProductConditionWrite:
      type: object
      description: Serializer for creating/updating conditions.
      properties:
        name:
          type: string
          maxLength: 50
        description:
          type: string
        quality_score:
          type: integer
          maximum: 10
          minimum: 1
          description: Quality score from 1 (poor) to 10 (perfect)
        price_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,3})?$
          description: Price adjustment factor (0.1 to 2.0)
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        color_code:
          type: string
          description: Hex color code for UI display
          maxLength: 7
        icon_name:
          type: string
          description: Icon name for UI (e.g., 'star', 'check-circle')
          maxLength: 50
        is_active:
          type: boolean
    PatchedProductDetailTemplateUpdate:
      type: object
      description: Serializer for template updates with partial validation
      properties:
        detail_type:
          $ref: '#/components/schemas/DetailTypeEnum'
        label:
          type: string
          maxLength: 100
        unit:
          type: string
          maxLength: 20
        is_required:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
          description: Category-specific template
        placeholder_text:
          type: string
        validation_regex:
          type: string
          maxLength: 200
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
    PatchedProductImage:
      type: object
      description: Main serializer for ProductImage - matches API response example
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        image_url:
          type: string
          nullable: true
          readOnly: true
        alt_text:
          type: string
          maxLength: 255
        is_primary:
          type: boolean
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        variant:
          allOf:
          - $ref: '#/components/schemas/ProductImageVariant'
          readOnly: true
        file_size:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        dimensions:
          type: string
          description: Return dimensions as string format matching API example
          readOnly: true
        is_active:
          type: boolean
        created_by_user:
          type: boolean
    PatchedProductImageVariant:
      type: object
      description: Serializer for ProductImageVariant - matches API response structure
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
        quality:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
    PatchedProductMetaWrite:
      type: object
      description: |-
        Serializer for creating/updating product metadata.
        Used by admins.
      properties:
        product:
          type: string
          format: uuid
        seo_keywords:
          type: string
          maxLength: 500
    PatchedProductRatings:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        review:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          maxLength: 200
        is_verified_purchase:
          type: boolean
        helpful_count:
          type: integer
          maximum: 2147483647
          minimum: 0
        total_votes:
          type: integer
          maximum: 2147483647
          minimum: 0
        helpfulness_ratio:
          type: number
          format: double
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        can_vote:
          type: boolean
          readOnly: true
        user_vote:
          type: boolean
          nullable: true
          readOnly: true
        product_title:
          type: string
          readOnly: true
        is_owner:
          type: boolean
          readOnly: true
    PatchedProductUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        condition_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
        authenticity_guaranteed:
          type: boolean
        warranty_period:
          type: string
          description: Warranty period in months or years
          maxLength: 100
        original_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          maxLength: 3
        escrow_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        location:
          type: string
          maxLength: 200
    PatchedProductVariant:
      type: object
      description: Enhanced serializer for product variants (read operations)
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sku:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        cost_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Cost to acquire/produce this variant
        final_price:
          type: string
          nullable: true
          description: Get final price including option adjustments
          readOnly: true
        total_inventory:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        in_escrow_inventory:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Quantity reserved for pending orders
        available_quantity:
          type: integer
          description: Get available quantity (stock - reserved)
          readOnly: true
        low_stock_threshold:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Alert when stock falls below this level
        is_active:
          type: boolean
        is_in_stock:
          type: boolean
          description: Check if variant is in stock
          readOnly: true
        is_low_stock:
          type: boolean
          description: Check if variant is low on stock
          readOnly: true
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,3})?$
          nullable: true
          description: Weight in kg
        dimensions:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get dimensions as a dict
          readOnly: true
        is_digital:
          type: boolean
          description: Whether this is a digital product
        is_backorderable:
          type: boolean
          description: Can be ordered when out of stock
        expected_restock_date:
          type: string
          format: date
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantOption'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantImage'
          readOnly: true
        option_summary:
          type: string
          description: Get formatted option summary
          readOnly: true
    PatchedProductVariantOption:
      type: object
      description: Enhanced serializer for product variant options
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        value:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        display_value:
          type: string
          description: Display name if different from value
          maxLength: 100
        color_code:
          type: string
          description: Hex color code for color swatches
          maxLength: 7
        price_adjustment:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Price adjustment for this option (can be negative)
        is_active:
          type: boolean
        display_name:
          type: string
          description: Get display name or fallback to value
          readOnly: true
        image_url:
          type: string
          nullable: true
          description: Get image URL if available
          readOnly: true
        variant_type:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the variant type
    PatchedProductVariantType:
      type: object
      description: Enhanced serializer for product variant types
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
        is_required:
          type: boolean
          description: Whether this variant type is required for all products
        display_type:
          allOf:
          - $ref: '#/components/schemas/DisplayTypeEnum'
          description: |-
            How this variant should be displayed to customers

            * `dropdown` - Dropdown
            * `radio` - Radio Buttons
            * `color_swatch` - Color Swatch
            * `image_swatch` - Image Swatch
            * `text` - Text Input
        affects_price:
          type: boolean
          description: Whether this variant type can affect pricing
        affects_inventory:
          type: boolean
          description: Whether this variant type affects inventory tracking
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantOption'
          readOnly: true
        option_count:
          type: integer
          description: Get count of active options
          readOnly: true
    PatchedProductWatchlistItemDetail:
      type: object
      description: Detailed serializer for individual watchlist items.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/WatchlistProductList'
          readOnly: true
        added_at:
          type: string
          format: date-time
          readOnly: true
        days_in_watchlist:
          type: integer
          description: Calculate days since item was added to watchlist.
          readOnly: true
    PatchedPublicUser:
      type: object
      description: Only the fields you’re okay exposing to others.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        full_name:
          type: string
          readOnly: true
        profile:
          allOf:
          - $ref: '#/components/schemas/PublicUserProfile'
          readOnly: true
    PatchedRatingDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        comment:
          type: string
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_verified:
          type: boolean
        from_user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        to_user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        transaction_title:
          type: string
          readOnly: true
        transaction_date:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        profile:
          $ref: '#/components/schemas/UserProfile'
        store:
          $ref: '#/components/schemas/UserStore'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
        received_ratings:
          type: array
          items:
            $ref: '#/components/schemas/RatingList'
          readOnly: true
        disputes:
          type: array
          items:
            $ref: '#/components/schemas/DisputeList'
          readOnly: true
        transaction_history:
          type: array
          items:
            $ref: '#/components/schemas/TransactionHistory'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUserAddress:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        address_type:
          $ref: '#/components/schemas/AddressTypeEnum'
        is_default:
          type: boolean
        name:
          type: string
          maxLength: 100
        street_address:
          type: string
          maxLength: 255
        apartment:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        phone:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUserStore:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        logo:
          type: string
          format: uri
          nullable: true
        banner:
          type: string
          format: uri
          nullable: true
        description:
          type: string
        return_policy:
          type: string
        shipping_policy:
          type: string
        website:
          type: string
          format: uri
          maxLength: 200
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PendingRating:
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
        transaction_title:
          type: string
        seller_name:
          type: string
        status_changed_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        days_remaining:
          type: integer
          maximum: 1000
          minimum: 1
      required:
      - days_remaining
      - expires_at
      - seller_name
      - status_changed_at
      - transaction_id
      - transaction_title
    PriceNegotiation:
      type: object
      description: Main serializer for price negotiations
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductSummary'
          readOnly: true
        buyer:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        variant:
          allOf:
          - $ref: '#/components/schemas/VariantShort'
          readOnly: true
        formatted_original_price:
          type: string
          readOnly: true
        formatted_offered_price:
          type: string
          readOnly: true
        formatted_final_price:
          type: string
          nullable: true
          readOnly: true
        status_display:
          type: string
          readOnly: true
        discount_amount:
          type: number
          format: double
          description: Calculate discount amount from original price
          readOnly: true
        discount_percentage:
          type: number
          format: double
          description: Calculate discount percentage
          readOnly: true
        offered_at:
          type: string
          format: date-time
        time_remaining:
          type: string
          nullable: true
          description: Calculate time remaining for negotiation response
          readOnly: true
        can_respond:
          type: boolean
          description: Check if current user can respond to this negotiation
          readOnly: true
        history:
          type: array
          items:
            $ref: '#/components/schemas/NegotiationHistory'
          readOnly: true
      required:
      - buyer
      - can_respond
      - discount_amount
      - discount_percentage
      - formatted_final_price
      - formatted_offered_price
      - formatted_original_price
      - history
      - id
      - product
      - seller
      - status_display
      - time_remaining
      - variant
    ProductConditionAnalytics:
      type: object
      description: Serializer for condition analytics data.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        quality_score:
          type: integer
          maximum: 10
          minimum: 1
          description: Quality score from 1 (poor) to 10 (perfect)
        total_products:
          type: integer
          maximum: 1000
          minimum: 1
        avg_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        price_range:
          type: object
          additionalProperties: {}
        categories_count:
          type: integer
          maximum: 1000
          minimum: 1
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock_status:
          type: object
          additionalProperties: {}
      required:
      - avg_price
      - avg_rating
      - categories_count
      - id
      - name
      - price_range
      - stock_status
      - total_products
    ProductConditionDetail:
      type: object
      description: Detailed serializer with full information.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          maxLength: 60
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        quality_score:
          type: integer
          maximum: 10
          minimum: 1
          description: Quality score from 1 (poor) to 10 (perfect)
        price_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,3})?$
          description: Price adjustment factor (0.1 to 2.0)
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        color_code:
          type: string
          description: Hex color code for UI display
          maxLength: 7
        icon_name:
          type: string
          description: Icon name for UI (e.g., 'star', 'check-circle')
          maxLength: 50
        products_count:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        avg_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,2})?$
          readOnly: true
        is_active:
          type: boolean
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - avg_price
      - avg_rating
      - created_at
      - created_by_name
      - id
      - name
      - products_count
      - slug
      - updated_at
    ProductConditionList:
      type: object
      description: Optimized serializer for listing product conditions.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          maxLength: 60
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        quality_score:
          type: integer
          maximum: 10
          minimum: 1
          description: Quality score from 1 (poor) to 10 (perfect)
        price_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,3})?$
          description: Price adjustment factor (0.1 to 2.0)
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        color_code:
          type: string
          description: Hex color code for UI display
          maxLength: 7
        icon_name:
          type: string
          description: Icon name for UI (e.g., 'star', 'check-circle')
          maxLength: 50
        products_count:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        avg_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - avg_price
      - created_at
      - id
      - name
      - products_count
      - slug
    ProductConditionWrite:
      type: object
      description: Serializer for creating/updating conditions.
      properties:
        name:
          type: string
          maxLength: 50
        description:
          type: string
        quality_score:
          type: integer
          maximum: 10
          minimum: 1
          description: Quality score from 1 (poor) to 10 (perfect)
        price_factor:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,3})?$
          description: Price adjustment factor (0.1 to 2.0)
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        color_code:
          type: string
          description: Hex color code for UI display
          maxLength: 7
        icon_name:
          type: string
          description: Icon name for UI (e.g., 'star', 'check-circle')
          maxLength: 50
        is_active:
          type: boolean
      required:
      - name
    ProductCreate:
      type: object
      description: |-
        Minimal serializer for creating products.
        Only title is required, other fields can be updated later.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        category:
          type: string
          format: uuid
          writeOnly: true
        condition:
          type: string
          format: uuid
          writeOnly: true
        brand:
          type: string
          format: uuid
          writeOnly: true
      required:
      - brand
      - category
      - condition
      - id
      - title
    ProductDetailTemplate:
      type: object
      description: Main serializer for ProductDetailTemplate CRUD operations
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        detail_type:
          $ref: '#/components/schemas/DetailTypeEnum'
        detail_type_display:
          type: string
          readOnly: true
        label:
          type: string
          maxLength: 100
        unit:
          type: string
          maxLength: 20
        is_required:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
          description: Category-specific template
        category_name:
          type: string
          readOnly: true
        placeholder_text:
          type: string
        validation_regex:
          type: string
          maxLength: 200
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        usage_count:
          type: integer
          description: Get count of active product details using this template
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category_name
      - created_at
      - detail_type_display
      - id
      - label
      - updated_at
      - usage_count
    ProductDetailTemplateBulkCreate:
      type: object
      description: Serializer for bulk template creation
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/ProductDetailTemplateCreate'
      required:
      - templates
    ProductDetailTemplateCreate:
      type: object
      description: Simplified serializer for template creation
      properties:
        detail_type:
          $ref: '#/components/schemas/DetailTypeEnum'
        label:
          type: string
          maxLength: 100
        unit:
          type: string
          maxLength: 20
        is_required:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
          description: Category-specific template
        placeholder_text:
          type: string
        validation_regex:
          type: string
          maxLength: 200
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - label
    ProductDetailTemplateSummary:
      type: object
      description: Lightweight serializer for lists and dropdowns
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        label:
          type: string
          maxLength: 100
        detail_type:
          $ref: '#/components/schemas/DetailTypeEnum'
        detail_type_display:
          type: string
          readOnly: true
        unit:
          type: string
          maxLength: 20
        is_required:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
          description: Category-specific template
        category_name:
          type: string
          readOnly: true
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - category_name
      - detail_type_display
      - id
      - label
    ProductDetailTemplateUpdate:
      type: object
      description: Serializer for template updates with partial validation
      properties:
        detail_type:
          $ref: '#/components/schemas/DetailTypeEnum'
        label:
          type: string
          maxLength: 100
        unit:
          type: string
          maxLength: 20
        is_required:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
          description: Category-specific template
        placeholder_text:
          type: string
        validation_regex:
          type: string
          maxLength: 200
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - label
    ProductImage:
      type: object
      description: Main serializer for ProductImage - matches API response example
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        image_url:
          type: string
          nullable: true
          readOnly: true
        alt_text:
          type: string
          maxLength: 255
        is_primary:
          type: boolean
        display_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        variant:
          allOf:
          - $ref: '#/components/schemas/ProductImageVariant'
          readOnly: true
        file_size:
          type: integer
          maximum: 1000
          minimum: 1
          readOnly: true
        dimensions:
          type: string
          description: Return dimensions as string format matching API example
          readOnly: true
        is_active:
          type: boolean
        created_by_user:
          type: boolean
      required:
      - dimensions
      - file_size
      - id
      - image_url
      - variant
    ProductImageVariant:
      type: object
      description: Serializer for ProductImageVariant - matches API response structure
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
        quality:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
      required:
      - height
      - id
      - name
      - width
    ProductList:
      type: object
      description: |-
        Serializer for listing products with essential information.
        Optimized for displaying products in listings.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        originalPrice:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        category_name:
          type: string
          readOnly: true
        condition_name:
          type: string
          readOnly: true
        requires_inspection:
          type: boolean
        is_active:
          type: boolean
        is_featured:
          type: boolean
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        ratings:
          type: object
          additionalProperties: {}
          description: Get ratings from annotated fields
          readOnly: true
        short_code:
          type: string
          nullable: true
          maxLength: 200
        seller:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        escrowFee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        location:
          type: string
          maxLength: 200
        description:
          type: string
        image_url:
          type: string
          nullable: true
          readOnly: true
        discount_percent:
          type: number
          format: double
          readOnly: true
        brand_name:
          type: string
          nullable: true
          readOnly: true
      required:
      - brand_name
      - category_name
      - condition_name
      - description
      - discount_percent
      - escrowFee
      - id
      - image_url
      - originalPrice
      - ratings
      - seller
      - slug
      - title
    ProductMetaDetail:
      type: object
      description: |-
        Detailed serializer for product metadata, including related product info.
        Used for public-facing endpoints like stats, featured, popular, etc.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          type: string
          format: uuid
          readOnly: true
        product_title:
          type: string
          readOnly: true
        product_slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        product_shortcode:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        product_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        product_is_featured:
          type: boolean
          readOnly: true
        product_image_url:
          type: string
          nullable: true
          description: |-
            Get the primary image URL for the product.
            This is efficient because the view will prefetch the images.
          readOnly: true
        views_count:
          type: integer
          readOnly: true
        seo_keywords:
          type: string
          readOnly: true
      required:
      - id
      - product
      - product_image_url
      - product_is_featured
      - product_price
      - product_shortcode
      - product_slug
      - product_title
      - seo_keywords
      - views_count
    ProductMetaWrite:
      type: object
      description: |-
        Serializer for creating/updating product metadata.
        Used by admins.
      properties:
        product:
          type: string
          format: uuid
        seo_keywords:
          type: string
          maxLength: 500
      required:
      - product
    ProductRatingAggregate:
      type: object
      properties:
        average:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        count:
          type: integer
          maximum: 1000
          minimum: 1
        verified_count:
          type: integer
          maximum: 1000
          minimum: 1
        breakdown:
          type: array
          items:
            type: object
            additionalProperties: {}
          readOnly: true
        has_reviews:
          type: boolean
        last_rating_date:
          type: string
          format: date-time
          nullable: true
      required:
      - average
      - breakdown
      - count
      - verified_count
    ProductRatings:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        review:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          maxLength: 200
        is_verified_purchase:
          type: boolean
        helpful_count:
          type: integer
          maximum: 2147483647
          minimum: 0
        total_votes:
          type: integer
          maximum: 2147483647
          minimum: 0
        helpfulness_ratio:
          type: number
          format: double
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        can_vote:
          type: boolean
          readOnly: true
        user_vote:
          type: boolean
          nullable: true
          readOnly: true
        product_title:
          type: string
          readOnly: true
        is_owner:
          type: boolean
          readOnly: true
      required:
      - can_vote
      - helpfulness_ratio
      - id
      - is_owner
      - product_title
      - rating
      - user
      - user_vote
    ProductStats:
      type: object
      description: |-
        Specialized serializer for collecting product statistics.
        Focused on fields useful for analytics.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller_id:
          type: string
          format: uuid
        seller_name:
          type: string
        title:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        original_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          maxLength: 3
        category_id:
          type: string
          format: uuid
        category_name:
          type: string
        condition_name:
          type: string
        is_active:
          type: boolean
        is_featured:
          type: boolean
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        watching_count:
          type: integer
          readOnly: true
        images_count:
          type: integer
          readOnly: true
        has_discount:
          type: boolean
          readOnly: true
        discount_amount:
          type: number
          format: double
          readOnly: true
        discount_percent:
          type: number
          format: double
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category_id
      - category_name
      - condition_name
      - created_at
      - discount_amount
      - discount_percent
      - has_discount
      - id
      - images_count
      - seller_id
      - seller_name
      - title
      - updated_at
      - watching_count
    ProductStatusEnum:
      enum:
      - draft
      - active
      - inactive
      - sold
      type: string
      description: |-
        * `draft` - Draft
        * `active` - Active
        * `inactive` - Inactive
        * `sold` - Sold
    ProductSummary:
      type: object
      description: Minimal product info for negotiation responses
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        formatted_price:
          type: string
          readOnly: true
        seller_name:
          type: string
          readOnly: true
      required:
      - formatted_price
      - id
      - seller_name
      - title
    ProductUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        condition_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
        authenticity_guaranteed:
          type: boolean
        warranty_period:
          type: string
          description: Warranty period in months or years
          maxLength: 100
        original_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          type: string
          maxLength: 3
        escrow_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        location:
          type: string
          maxLength: 200
      required:
      - description
      - title
    ProductVariant:
      type: object
      description: Enhanced serializer for product variants (read operations)
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sku:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        cost_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Cost to acquire/produce this variant
        final_price:
          type: string
          nullable: true
          description: Get final price including option adjustments
          readOnly: true
        total_inventory:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        in_escrow_inventory:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Quantity reserved for pending orders
        available_quantity:
          type: integer
          description: Get available quantity (stock - reserved)
          readOnly: true
        low_stock_threshold:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Alert when stock falls below this level
        is_active:
          type: boolean
        is_in_stock:
          type: boolean
          description: Check if variant is in stock
          readOnly: true
        is_low_stock:
          type: boolean
          description: Check if variant is low on stock
          readOnly: true
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,3})?$
          nullable: true
          description: Weight in kg
        dimensions:
          type: object
          additionalProperties: {}
          nullable: true
          description: Get dimensions as a dict
          readOnly: true
        is_digital:
          type: boolean
          description: Whether this is a digital product
        is_backorderable:
          type: boolean
          description: Can be ordered when out of stock
        expected_restock_date:
          type: string
          format: date
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantOption'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantImage'
          readOnly: true
        option_summary:
          type: string
          description: Get formatted option summary
          readOnly: true
      required:
      - available_quantity
      - dimensions
      - final_price
      - id
      - images
      - is_in_stock
      - is_low_stock
      - option_summary
      - options
      - sku
    ProductVariantBulkCreate:
      type: object
      description: Serializer for bulk creating variants
      properties:
        product_id:
          type: integer
          maximum: 1000
          minimum: 1
        async_processing:
          type: boolean
          default: false
        variants:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: List of variant data dictionaries
      required:
      - product_id
      - variants
    ProductVariantCombinationGenerator:
      type: object
      description: Serializer for generating variant combinations
      properties:
        product_id:
          type: string
          format: uuid
        variant_type_options:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              format: uuid
          description: Dict mapping variant_type_id to list of option_ids
        base_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        sku_separator:
          type: string
          default: '-'
          maxLength: 5
      required:
      - product_id
      - variant_type_options
    ProductVariantCreate:
      type: object
      description: Serializer for creating product variants
      properties:
        product:
          type: string
          format: uuid
          writeOnly: true
        sku:
          type: string
          maxLength: 100
        cost_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
          description: Cost to acquire/produce this variant
        low_stock_threshold:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Alert when stock falls below this level
        is_active:
          type: boolean
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,3})?$
          nullable: true
          description: Weight in kg
        dimensions_length:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          nullable: true
          description: Length in cm
        dimensions_width:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          nullable: true
          description: Width in cm
        dimensions_height:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          nullable: true
          description: Height in cm
        is_digital:
          type: boolean
          description: Whether this is a digital product
        is_backorderable:
          type: boolean
          description: Can be ordered when out of stock
        expected_restock_date:
          type: string
          format: date
          nullable: true
        option_ids:
          type: array
          items:
            type: string
            format: uuid
          writeOnly: true
          description: List of variant option IDs
      required:
      - option_ids
      - product
      - sku
    ProductVariantImage:
      type: object
      description: Serializer for variant images
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        image:
          type: string
          format: uri
        image_url:
          type: string
          nullable: true
          description: Get absolute image URL
          readOnly: true
        alt_text:
          type: string
          maxLength: 255
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_primary:
          type: boolean
      required:
      - id
      - image
      - image_url
    ProductVariantOption:
      type: object
      description: Enhanced serializer for product variant options
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        value:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        display_value:
          type: string
          description: Display name if different from value
          maxLength: 100
        color_code:
          type: string
          description: Hex color code for color swatches
          maxLength: 7
        price_adjustment:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Price adjustment for this option (can be negative)
        is_active:
          type: boolean
        display_name:
          type: string
          description: Get display name or fallback to value
          readOnly: true
        image_url:
          type: string
          nullable: true
          description: Get image URL if available
          readOnly: true
        variant_type:
          type: string
          format: uuid
          writeOnly: true
          description: UUID of the variant type
      required:
      - display_name
      - id
      - image_url
      - slug
      - value
      - variant_type
    ProductVariantStockUpdate:
      type: object
      description: Serializer for bulk stock updates
      properties:
        async_processing:
          type: boolean
          default: false
        stock_updates:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: 'List of stock update data: [{''variant_id'': 1, ''quantity'':
            10, ''operation'': ''set''}]'
      required:
      - stock_updates
    ProductVariantType:
      type: object
      description: Enhanced serializer for product variant types
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        sort_order:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
        is_required:
          type: boolean
          description: Whether this variant type is required for all products
        display_type:
          allOf:
          - $ref: '#/components/schemas/DisplayTypeEnum'
          description: |-
            How this variant should be displayed to customers

            * `dropdown` - Dropdown
            * `radio` - Radio Buttons
            * `color_swatch` - Color Swatch
            * `image_swatch` - Image Swatch
            * `text` - Text Input
        affects_price:
          type: boolean
          description: Whether this variant type can affect pricing
        affects_inventory:
          type: boolean
          description: Whether this variant type affects inventory tracking
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantOption'
          readOnly: true
        option_count:
          type: integer
          description: Get count of active options
          readOnly: true
      required:
      - id
      - name
      - option_count
      - options
      - slug
    ProductWatchlistBulk:
      type: object
      description: Serializer for bulk watchlist operations.
      properties:
        operation:
          allOf:
          - $ref: '#/components/schemas/OperationEnum'
          description: |-
            Operation to perform: 'add' or 'remove'

            * `add` - Add products to watchlist
            * `remove` - Remove products from watchlist
        product_ids:
          type: array
          items:
            type: string
            format: uuid
          description: List of product IDs (max 100)
          maxItems: 100
          minItems: 1
        validate_products:
          type: boolean
          default: true
          description: Whether to validate that all products exist and are active
      required:
      - operation
      - product_ids
    ProductWatchlistItemCreate:
      type: object
      description: Serializer for creating watchlist items.
      properties:
        product_id:
          type: string
          format: uuid
          writeOnly: true
      required:
      - product_id
    ProductWatchlistItemDetail:
      type: object
      description: Detailed serializer for individual watchlist items.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/WatchlistProductList'
          readOnly: true
        added_at:
          type: string
          format: date-time
          readOnly: true
        days_in_watchlist:
          type: integer
          description: Calculate days since item was added to watchlist.
          readOnly: true
      required:
      - added_at
      - days_in_watchlist
      - id
      - product
      - user
    ProductWatchlistItemList:
      type: object
      description: Serializer for listing watchlist items with minimal product info.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        added_at:
          type: string
          format: date-time
          readOnly: true
        days_in_watchlist:
          type: integer
          description: Calculate days since item was added to watchlist.
          readOnly: true
      required:
      - added_at
      - days_in_watchlist
      - id
      - product
    ProviderAuth:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
        user:
          type: string
          readOnly: true
      required:
      - access
      - refresh
      - user
    PublicUser:
      type: object
      description: Only the fields you’re okay exposing to others.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        full_name:
          type: string
          readOnly: true
        profile:
          allOf:
          - $ref: '#/components/schemas/PublicUserProfile'
          readOnly: true
      required:
      - full_name
      - id
      - profile
    PublicUserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        display_name:
          type: string
          readOnly: true
        full_name:
          type: string
          readOnly: true
        avatar_url:
          type: string
          format: uri
          readOnly: true
          nullable: true
        is_verified:
          type: boolean
          readOnly: true
        bio:
          type: string
          readOnly: true
        reviews:
          allOf:
          - $ref: '#/components/schemas/SellerReviews'
          readOnly: true
        verified_status:
          type: boolean
          readOnly: true
        transactions_completed:
          type: integer
          description: Get total completed transactions (as buyer + seller)
          readOnly: true
        country:
          type: string
          readOnly: true
        city:
          type: string
          readOnly: true
        positive_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
        location:
          type: string
          readOnly: true
        response_rate:
          type: integer
          readOnly: true
        response_time:
          type: string
          readOnly: true
        memberSince:
          type: string
          readOnly: true
        average_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        total_sales:
          type: integer
          description: Get total sales amount from completed transactions
          readOnly: true
      required:
      - avatar_url
      - average_rating
      - bio
      - city
      - country
      - display_name
      - full_name
      - id
      - is_verified
      - location
      - memberSince
      - positive_percentage
      - response_rate
      - response_time
      - reviews
      - total_sales
      - transactions_completed
      - verified_status
    RatingCreate:
      type: object
      description: Simplified serializer for creating ratings - business logic handled
        in service
      properties:
        rating:
          type: integer
          maximum: 1000
          minimum: 1
        comment:
          type: string
          maxLength: 1000
        transaction_id:
          type: string
          maxLength: 1000
      required:
      - rating
    RatingDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        comment:
          type: string
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_verified:
          type: boolean
        from_user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        to_user:
          allOf:
          - $ref: '#/components/schemas/UserShort'
          readOnly: true
        transaction_title:
          type: string
          readOnly: true
        transaction_date:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - from_user
      - id
      - rating
      - to_user
      - transaction_date
      - transaction_title
      - updated_at
    RatingEligibility:
      type: object
      description: Legacy serializer for transaction-based eligibility
      properties:
        can_rate:
          type: boolean
        reason:
          type: string
        expires_at:
          type: string
          format: date-time
          nullable: true
        transaction_id:
          type: string
          format: uuid
        seller_name:
          type: string
          nullable: true
      required:
      - can_rate
      - expires_at
      - reason
      - seller_name
      - transaction_id
    RatingList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        comment:
          type: string
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_verified:
          type: boolean
        from_user_name:
          type: string
          readOnly: true
        transaction_title:
          type: string
          readOnly: true
      required:
      - created_at
      - from_user_name
      - id
      - rating
      - transaction_title
    RatingStats:
      type: object
      properties:
        average_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        total_ratings:
          type: integer
          maximum: 1000
          minimum: 1
        rating_distribution:
          type: object
          additionalProperties: {}
        recent_ratings_count:
          type: integer
          maximum: 1000
          minimum: 1
      required:
      - average_rating
      - rating_distribution
      - recent_ratings_count
      - total_ratings
    SellerReviews:
      type: object
      properties:
        positive:
          type: integer
          readOnly: true
        neutral:
          type: integer
          readOnly: true
        negative:
          type: integer
          readOnly: true
      required:
      - negative
      - neutral
      - positive
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPasswordRetype:
      type: object
      properties:
        new_password:
          type: string
        re_new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
      - re_new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - current_password
      - new_email
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    TransactionHistory:
      type: object
      description: Serializer for transaction history records
      properties:
        timestamp:
          type: string
          format: date-time
          readOnly: true
        notes:
          type: string
        previous_status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/EscrowTransactionStatusEnum'
          - $ref: '#/components/schemas/NullEnum'
        new_status:
          $ref: '#/components/schemas/EscrowTransactionStatusEnum'
        created_by:
          type: string
          format: uuid
          nullable: true
        created_by_name:
          type: string
          readOnly: true
      required:
      - created_by_name
      - new_status
      - timestamp
    TransactionTypeEnum:
      enum:
      - ADD
      - ACTIVATE
      - ESCROW
      - COMPLETE
      - CANCEL
      type: string
      description: |-
        * `ADD` - Add to Total
        * `ACTIVATE` - Move to Available
        * `ESCROW` - Place in Escrow
        * `COMPLETE` - Complete Transaction
        * `CANCEL` - Cancel Escrow
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        profile:
          $ref: '#/components/schemas/UserProfile'
        store:
          $ref: '#/components/schemas/UserStore'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
        received_ratings:
          type: array
          items:
            $ref: '#/components/schemas/RatingList'
          readOnly: true
        disputes:
          type: array
          items:
            $ref: '#/components/schemas/DisputeList'
          readOnly: true
        transaction_history:
          type: array
          items:
            $ref: '#/components/schemas/TransactionHistory'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - disputes
      - email
      - id
      - received_ratings
      - transaction_history
      - updated_at
    UserAddress:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        address_type:
          $ref: '#/components/schemas/AddressTypeEnum'
        is_default:
          type: boolean
        name:
          type: string
          maxLength: 100
        street_address:
          type: string
          maxLength: 255
        apartment:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        phone:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - city
      - country
      - created_at
      - id
      - name
      - phone
      - postal_code
      - state
      - street_address
      - updated_at
    UserCreate:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        id:
          type: string
          format: uuid
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        display_name:
          type: string
          maxLength: 100
        bio:
          type: string
        email_verified:
          type: boolean
        phone_verified:
          type: boolean
        identity_verified:
          type: boolean
        phone_number:
          type: string
          maxLength: 20
        country:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        positive_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        memberSince:
          type: string
          readOnly: true
        location:
          type: string
          maxLength: 200
        response_rate:
          type: integer
          maximum: 2147483647
          minimum: 0
        response_time:
          type: string
          maxLength: 50
        reviews:
          allOf:
          - $ref: '#/components/schemas/SellerReviews'
          readOnly: true
        is_verified:
          type: boolean
        last_active:
          type: string
          format: date-time
          readOnly: true
        transactions_completed:
          type: integer
          description: Get total completed transactions (as buyer + seller)
          readOnly: true
        notification_email:
          type: boolean
        notification_sms:
          type: boolean
        average_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        verified_status:
          type: boolean
          readOnly: true
        total_sales:
          type: integer
          description: Get total sales amount from completed transactions
          readOnly: true
        total_purchases:
          type: integer
          description: Get total purchase amount from completed transactions
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - average_rating
      - created_at
      - id
      - last_active
      - memberSince
      - reviews
      - total_purchases
      - total_sales
      - transactions_completed
      - updated_at
      - verified_status
    UserShort:
      type: object
      description: Serializer for a short representation of the user.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        full_name:
          type: string
          readOnly: true
      required:
      - full_name
      - id
    UserStore:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        logo:
          type: string
          format: uri
          nullable: true
        banner:
          type: string
          format: uri
          nullable: true
        description:
          type: string
        return_policy:
          type: string
        shipping_policy:
          type: string
        website:
          type: string
          format: uri
          maxLength: 200
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - slug
      - updated_at
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - new_email
    VariantShort:
      type: object
      description: Serializer for a short representation of the user.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sku:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
      required:
      - id
      - sku
    WatchlistInsights:
      type: object
      description: Serializer for advanced watchlist insights.
      properties:
        total_items:
          type: integer
          maximum: 1000
          minimum: 1
        recent_activity:
          type: object
          additionalProperties: {}
          description: Recent activity breakdown
        category_distribution:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: Distribution of products by category
        activity_summary:
          type: string
          description: Human-readable activity summary
        recommendations:
          type: array
          items:
            type: string
          description: Personalized recommendations
      required:
      - activity_summary
      - category_distribution
      - recent_activity
      - recommendations
      - total_items
    WatchlistOperationResult:
      type: object
      description: Serializer for watchlist operation results.
      properties:
        success:
          type: boolean
        message:
          type: string
        status:
          type: string
        affected_count:
          type: integer
          maximum: 100
          minimum: 1
          default: 0
        errors:
          type: array
          items:
            type: string
      required:
      - message
      - status
      - success
    WatchlistProductList:
      type: object
      description: |-
        Serializer for listing products with essential information.
        Optimized for displaying products in listings.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        originalPrice:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        currency:
          type: string
          maxLength: 3
        category_name:
          type: string
          readOnly: true
        condition_name:
          type: string
          readOnly: true
        requires_inspection:
          type: boolean
        is_active:
          type: boolean
        is_featured:
          type: boolean
        status:
          $ref: '#/components/schemas/ProductStatusEnum'
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        ratings:
          type: object
          additionalProperties: {}
          description: Get ratings from annotated fields
          readOnly: true
        short_code:
          type: string
          nullable: true
          maxLength: 200
        seller:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        escrowFee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        location:
          type: string
          maxLength: 200
        description:
          type: string
        image_url:
          type: string
          nullable: true
          readOnly: true
        discount_percent:
          type: number
          format: double
          readOnly: true
        brand_name:
          type: string
          nullable: true
          readOnly: true
      required:
      - brand_name
      - category_name
      - condition_name
      - description
      - discount_percent
      - escrowFee
      - id
      - image_url
      - originalPrice
      - ratings
      - seller
      - slug
      - title
    WatchlistStats:
      type: object
      description: Serializer for watchlist statistics.
      properties:
        total_items:
          type: integer
          maximum: 1000
          minimum: 1
        recently_added:
          type: array
          items:
            type: string
            format: uuid
          description: Product IDs of recently added items
        most_watched_categories:
          type: array
          items:
            type: object
            additionalProperties: {}
          description: Categories with highest watchlist counts
        oldest_item_date:
          type: string
          format: date-time
          nullable: true
        newest_item_date:
          type: string
          format: date-time
          nullable: true
        categories_count:
          type: integer
          maximum: 1000
          minimum: 1
      required:
      - categories_count
      - most_watched_categories
      - newest_item_date
      - oldest_item_date
      - recently_added
      - total_items
  securitySchemes:
    cookie-jwt:
      type: apiKey
      in: cookie
      name: jwt
